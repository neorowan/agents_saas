---
description: 
globs: src/services/**/*,src/database/**/*,src/server/**/*
alwaysApply: false
---
# Guia de Arquitetura Técnica Backend do Agents Chat

Este guia tem como objetivo esclarecer a arquitetura em camadas do backend do projeto Agents Chat, destacando as responsabilidades dos diretórios principais e como eles colaboram entre si.

## Mapeamento da Estrutura de Diretórios

```
src/
├── server/
│   ├── routers/          # Definições de rotas da API tRPC
│   └── services/         # Camada de serviços de lógica de negócio
│       └── */impls/      # Implementações específicas da plataforma
├── database/
│   ├── models/           # Modelos de dados (CRUD de tabela única)
│   ├── repositories/     # Camada de repositório (consultas complexas/agregação)
│   └── schemas/          # Definições de tabela do Drizzle ORM
└── services/             # Serviços do cliente (chama tRPC ou acessa Model diretamente)
```

## Arquitetura Principal em Camadas

O design backend do Agents Chat foca em modularidade, testabilidade e flexibilidade, para se adaptar a diferentes ambientes de execução (como PGLite no navegador, PostgreSQL remoto no servidor e aplicação desktop Electron).

Suas principais camadas são:

1.  Camada de Serviços do Cliente (`src/services`):

    - Localizada em src/services/.
    - Esta é a camada central da lógica de negócio do cliente, responsável por encapsular várias operações de negócio e lógica de processamento de dados.
    - Adaptação de Ambiente: Dependendo do ambiente de execução, a camada de serviço escolherá o método apropriado de acesso aos dados:
        - Modo de banco de dados local: Chama diretamente a camada `Model` para operações de dados, adequado para PGLite no navegador e aplicações Electron locais.
        - Modo de banco de dados remoto: Chama APIs do servidor através do cliente `tRPC`, adequado para cenários que requerem sincronização na nuvem.
    - Conversão de Tipos: Para conversões simples de tipos de dados, fazemos asserção de tipos diretamente nesta camada, como `this.pluginModel.query() as Promise<LobeTool[]>`
    - Cada módulo de serviço geralmente contém arquivos `client.ts` (modo local), `server.ts` (modo remoto) e `type.ts` (definições de interface). Na implementação, deve-se garantir que a lógica de negócio do modo local e remoto seja consistente, diferindo apenas no banco de dados.

2.  API 接口层 (`TRPC`):

    - 位于 src/server/routers/
    - 使用 `tRPC` 构建类型安全的 API。Router 根据运行时环境（如 Edge Functions, Node.js Lambda）进行组织。
    - 负责接收客户端请求，并将其路由到相应的 `Service` 层进行处理。
    - 新建 lambda 端点时可以参考 src/server/routers/lambda/\_template.ts

3.  仓库层 (`Repositories`):

    - 位于 src/database/repositories/。
    - 主要处理复杂的跨表查询和数据聚合逻辑，特别是当需要从多个 `Model` 获取数据并进行组合时。
    - 与 `Model` 层不同，`Repository` 层专注于复杂的业务查询场景，而不涉及简单的领域模型转换。
    - 当业务逻辑涉及多表关联、复杂的数据统计或需要事务处理时，会使用 `Repository` 层。
    - 如果数据操作简单（仅涉及单个 `Model`），则通常直接在 `src/services` 层调用 `Model` 并进行简单的类型断言。

4.  模型层 (`Models`):

    - 位于 src/database/models/ (例如 src/database/models/plugin.ts 和 src/database/models/document.ts)。
    - 提供对数据库中各个表（由 src/database/schemas/ 中的 Drizzle ORM schema 定义）的基本 CRUD (创建、读取、更新、删除) 操作和简单的查询能力。
    - `Model` 类专注于单个数据表的直接操作，不涉及复杂的领域模型转换，这些转换通常在上层的 `src/services` 中通过类型断言完成。
    - model（例如 Topic） 层接口经常需要从对应的 schema 层导入 NewTopic 和 TopicItem
    - 创建新的 model 时可以参考 src/database/models/\_template.ts

5.  数据库 (`Database`):
    - 客户端模式 (浏览器/PWA): 使用 PGLite (基于 WASM 的 PostgreSQL)，数据存储在用户浏览器本地。
    - 服务端模式 (云部署): 使用远程 PostgreSQL 数据库。
    - Electron 桌面应用:
        - Electron 客户端会启动一个本地 Node.js 服务。
        - 本地服务通过 `tRPC` 与 Electron 的渲染进程通信。
        - 数据库选择依赖于是否开启云同步功能：
            - 云同步开启: 连接到远程 PostgreSQL 数据库。
            - 云同步关闭: 使用 PGLite (通过 Node.js 的 WASM 实现) 在本地存储数据。

## 数据流向说明

### 浏览器/PWA 模式

```
UI (React) → Zustand action -> Client Service → Model Layer → PGLite (本地数据库)
```

### 服务端模式

```
UI (React) → Zustand action → Client Service -> TRPC Client → TRPC Routers  → Repositories/Models → Remote PostgreSQL
```

### Electron 桌面应用模式

```
UI (Electron Renderer) → Zustand action → Client Service -> TRPC Client → 本地 Node.js 服务 → TRPC Routers → Repositories/Models → PGLite/Remote PostgreSQL (取决于云同步设置)
```

## 服务层 (Server Services)

-  位于 src/server/services/。
-  核心职责是封装独立的、可复用的业务逻辑单元。这些服务应易于测试。
-  平台差异抽象: 一个关键特性是通过其内部的 `impls` 子目录（例如 src/server/services/file/impls 包含 s3.ts 和 local.ts）来抹平不同运行环境带来的差异（例如云端使用 S3 存储，桌面版使用本地文件系统）。这使得上层（如 `tRPC` routers）无需关心底层具体实现。
-  目标是使 `tRPC` router 层的逻辑尽可能纯粹，专注于请求处理和业务流程编排。
-  服务可能会调用 `Repository` 层或直接调用 `Model` 层进行数据持久化和检索，也可能调用其他服务。
