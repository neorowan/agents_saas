---
description: 
globs: 
alwaysApply: true
---
# Guia para Otimizar Renderização de Saída(Resposta)

## Renderização de Caminho de Arquivo e Símbolo de Código

- Ao renderizar caminhos de arquivo, use aspas invertidas ao invés de links markdown para que possam ser analisados como links clicáveis no IDE Cursor.

    - Bom: `src/components/Button.tsx`
    - Ruim: [src/components/Button.tsx](mdc:src/components/Button.tsx)

- Ao renderizar funções, variáveis ou outros símbolos de código, use aspas invertidas para que possam ser analisados como links navegáveis no IDE Cursor
    - Bom: O hook `useState` em `MyComponent`
    - Ruim: O hook useState em MyComponent
     
## Renderização Markdown

- não use tag br para quebrar em célula de tabela

## Saída de Comando de Terminal

- Se comandos de terminal não produzem saída, é provavelmente devido a problemas de paginação. Tente canalizar o comando para `cat` para garantir que a saída completa seja exibida.
    - Bom: `git show commit_hash -- file.txt | cat`
    - Bom: `git log --oneline | cat`
    - Razão: Alguns comandos git usam paginadores por padrão, o que pode impedir que a saída seja capturada adequadamente

## Geração de Diagrama Mermaid: Lista de Verificação de Validação de Sintaxe Rigorosa

Antes de produzir qualquer diagrama Mermaid, você **deve** comparar seu código final linha por linha contra cada regra na seguinte lista de verificação para garantir 100% de conformidade. **Este é um requisito rígido e tem precedência sobre outras sugestões estilísticas.** Por favor, siga estes passos de ação:

1.  Planeje a lógica do diagrama Mermaid em sua mente.
2.  Escreva o código Mermaid.
3.  **Revise cuidadosamente seu código linha por linha contra toda a lista de verificação abaixo.**
4.  Corrija qualquer aspecto do seu código que não esteja em conformidade.
5.  Use a ferramenta `validateMermaid` para verificar seu código quanto a erros de sintaxe. Apenas prossiga se a validação passar.
6.  Gere o bloco de código Mermaid final, em conformidade e pronto para cópia.
7.  Imediatamente após o bloco de código Mermaid, gere:  
    Verifiquei que a sintaxe Mermaid está totalmente em conformidade com a lista de verificação de validação.

---

### Detalhes da Lista de Verificação

#### Regra 1: Rótulos de Aresta – Devem Ser Apenas Texto Simples  
> **Essência:** Qualquer coisa dentro de `|...|` deve conter texto puro e não formatado. Absolutamente NENHUM Markdown, marcadores de lista ou parênteses/colchetes permitidos—estes frequentemente causam falhas de renderização.

-   **✅ Faça:** `A -->|Process plain text data| B`
-   **❌ Não faça:** `A -->|1. Ordered list item| B`    (Sem listas numeradas)
-   **❌ Não faça:** `CC --"1. fetch('/api/...')"--> API`   (Sem colchetes)
-   **❌ Não faça:** `A -->|- Unordered list item| B`   (Sem listas com hífen)
-   **❌ Não faça:** `A -->|Transform (important)| B`   (Sem parênteses)
-   **❌ Não faça:** `A -->|Transform [important]| B`   (Sem colchetes)

#### Regra 2: Definição de Nó – Lidar com Caracteres Especiais com Cuidado  
> **Essência:** Quando o texto do nó ou títulos de subgráfico contêm caracteres especiais como `()` ou `[]`, envolva o texto em aspas para evitar conflitos com a sintaxe de forma do Mermaid.

-   **Quando seu texto de nó inclui parênteses (ex: 'React (JSX)'):**
    -   **✅ Faça:** `I_REACT["<b>React component (JSX)</b>"]` (Aspas envolvem todo o texto)
    -   **❌ Não faça:** `I_REACT(<b>React component (JSX)</b>)` (Errado, Mermaid analisa isso como uma forma)
    -   **❌ Não faça:** `subgraph Plugin Features (Plugins)` (Errado, títulos de subgráfico com parênteses também devem ser envolvidos em aspas)

#### Regra 3: Aspas Duplas em Texto – Devem Ser Escapadas  
> **Essência:** Use `&quot;` para aspas duplas **dentro do texto do nó**.

-   **✅ Faça:** `A[This node contains &quot;quotes&quot;]`
-   **❌ Não faça:** `A[This node contains "quotes"]`

#### Regra 4: Toda Formatação Deve Usar Tags HTML (NÃO Markdown!)  
> **Essência:** Para quebras de linha, negrito e outras formatações de texto em nós, use apenas tags HTML. Markdown não é suportado.

-   **✅ Faça (robusto):** `A["<b>Bold</b> and <code>code</code><br>This is a new line"]`
-   **❌ Não faça (não renderizado):** `C["# This is a heading"]`
-   **❌ Não faça (não renderizado):** ``C["`const` means constant"]``
-   **⚠️ Aviso (não confiável):** `B["Markdown **bold** might sometimes work but DON'T rely on it"]`

#### Regra 5: Sem Tags HTML para Participantes e Rótulos de Mensagem (Diagramas de Sequência)  
> **Adição Importante:**  
> Em diagramas de sequência Mermaid, você NÃO DEVE usar nenhuma tag HTML (como `<b>`, `<code>`, etc.) em:
> - Nomes de exibição de `participant` (parte `as`)
> - Rótulos de mensagem (o texto após `:` nos fluxos do diagrama)
>
> Estas tags geralmente não são renderizadas—podem aparecer como estão ou causar problemas de compatibilidade.

-   **✅ Faça:** `participant A as Client`
-   **❌ Não faça:** `participant A as <b>Client</b>`
-   **✅ Faça:** `A->>B: 1. Establish connection`
-   **❌ Não faça:** `A->>B: 1. <code>Establish connection</code>`

---

**Valide cada bloco de código Mermaid executando-o através da ferramenta `validateMermaid` antes de entregar sua saída!**