---
description: Testes desktop
globs:
alwaysApply: false
---
# Guia de Testes Unitários de Controladores Desktop

## Framework de Testes e Estrutura de Diretórios

O desktop do Agents Chat usa Vitest como framework de testes. Os testes unitários dos controladores devem ser colocados no diretório `__tests__` no mesmo nível do arquivo do controlador correspondente, e nomeados com o nome do arquivo do controlador original mais `.test.ts`.

```
apps/desktop/src/main/controllers/
├── __tests__/
│   ├── index.test.ts
│   ├── MenuCtr.test.ts
│   └── ...
├── McpCtr.ts
├── MenuCtr.ts
└── ...
```

## Estrutura Básica do Arquivo de Teste

```typescript
import { beforeEach, describe, expect, it, vi } from 'vitest';

import type { App } from '@/core/App';

import YourController from '../YourControllerName';

// Mock de dependências
vi.mock('modulo-dependencia', () => ({
  funcaoDependencia: vi.fn(),
}));

// Mock da instância App
const mockApp = {
  // Mock das propriedades e métodos necessários do App conforme necessidade
} as unknown as App;

describe('YourController', () => {
  let controller: YourController;

  beforeEach(() => {
    vi.clearAllMocks();
    controller = new YourController(mockApp);
  });

  describe('nomeDoMetodo', () => {
    it('descricao do cenario de teste', async () => {
      // Preparar dados de teste

      // Executar método sendo testado
      const result = await controller.nomeDoMetodo(parametros);

      // Verificar resultado
      expect(result).toMatchObject(resultadoEsperado);
    });
  });
});
```

## Mock de Dependências Externas

### Mock de Funções de Módulo

```typescript
const mockFunction = vi.fn();

vi.mock('module-name', () => ({
  functionName: mockFunction,
}));
```

### Mock de Módulos Core do Node.js

Por exemplo, fazer mock de `child_process.exec` e `util.promisify`:

```typescript
// Armazenar implementação mock do exec
const mockExecImpl = vi.fn();

// Mock child_process.exec
vi.mock('child_process', () => ({
  exec: vi.fn((cmd, callback) => {
    return mockExecImpl(cmd, callback);
  }),
}));

// Mock util.promisify
vi.mock('util', () => ({
  promisify: vi.fn((fn) => {
    return async (cmd: string) => {
      return new Promise((resolve, reject) => {
        mockExecImpl(cmd, (error: Error | null, result: any) => {
          if (error) reject(error);
          else resolve(result);
        });
      });
    };
  }),
}));
```

## Escrevendo Casos de Teste Eficazes

### Classificação de Testes

Divida os casos de teste em diferentes categorias, cada categoria testando um cenário específico:

```typescript
// Cenários de sucesso
it('deve completar operação com sucesso', async () => {});

// Condições de borda
it('deve lidar com casos limite', async () => {});

// Tratamento de erro
it('deve tratar erros graciosamente', async () => {});
```

### Configuração de Dados de Teste

```typescript
// Mock de valores de retorno
mockExecImpl.mockImplementation((cmd: string, callback: any) => {
  if (cmd === 'comando') {
    callback(null, { stdout: 'saída de sucesso' });
  } else {
    callback(new Error('mensagem de erro'), null);
  }
});
```

### Asserções

Use as funções de asserção do Vitest para verificar resultados:

```typescript
// Verificar valores básicos
expect(result.success).toBe(true);

// Verificar correspondência parcial de objeto
expect(result.data).toMatchObject({
  key: 'value',
});

// Verificar arrays
expect(result.items).toHaveLength(2);
expect(result.items[0].name).toBe('expectedName');

// Verificar chamadas de função
expect(mockFunction).toHaveBeenCalledWith(expectedArgs);
expect(mockFunction).toHaveBeenCalledTimes(1);
```

## Melhores Práticas

1. **Isolamento de Testes**: Garanta que cada teste não afete os outros, use `beforeEach` para resetar mocks e estado
2. **Cobertura Abrangente**: Teste fluxos normais, condições de borda e tratamento de erros
3. **Nomenclatura Clara**: Nomes de teste devem descrever claramente o conteúdo do teste e resultado esperado
4. **Evitar Testar Detalhes de Implementação**: Testes devem focar no comportamento ao invés de detalhes de implementação, fazendo com que refatoração de código não quebre testes
5. **Mock de Dependências Externas**: Use `vi.mock()` para fazer mock de todas as dependências externas, reduzindo incerteza dos testes

## Exemplo: Testando Método de Manipulação de Evento IPC

```typescript
it('deve processar evento IPC corretamente', async () => {
  // Mock de dependências
  mockSomething.mockReturnValue({ result: 'success' });

  // Chamar método IPC
  const result = await controller.ipcMethodName({
    param1: 'value1',
    param2: 'value2',
  });

  // Verificar resultado
  expect(result).toEqual({
    success: true,
    data: { result: 'success' },
  });

  // Verificar chamadas de dependência
  expect(mockSomething).toHaveBeenCalledWith('value1', 'value2');
});
```