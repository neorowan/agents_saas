---
description: Quando trabalhando com electron
globs:
alwaysApply: false
---
**Guia de Implementação de Novas Funcionalidades Desktop**

## Visão Geral da Arquitetura da Aplicação Desktop

O desktop do Agents Chat é construído com base no framework Electron, adotando arquitetura de processo principal-processo de renderização:

1. **Processo Principal (Main Process)**:
   - Localização: `apps/desktop/src/main`
   - Responsabilidades: controle do ciclo de vida da aplicação, interação com API do sistema, gerenciamento de janelas, serviços em background

2. **Processo de Renderização (Renderer Process)**:
   - Reutiliza código do lado web, localizado no diretório `src`
   - Comunica com o processo principal através de IPC

3. **Script de Preload (Preload)**:
   - Localização: `apps/desktop/src/preload`
   - Responsabilidades: expor com segurança funcionalidades do processo principal para o processo de renderização

## Fluxo de Adição de Nova Funcionalidade Desktop

### 1. Determinar Requisitos e Design da Funcionalidade

Primeiro determine os requisitos e design da nova funcionalidade, incluindo:
- Descrição da funcionalidade e casos de uso
- Se precisa de APIs de nível de sistema (como sistema de arquivos, rede, etc.)
- Design de UI/UX (se necessário)
- Forma de interação com funcionalidades existentes

### 2. Implementar Funcionalidade Central no Processo Principal

1. **Criar Controlador (Controller)**
   - Localização: `apps/desktop/src/main/controllers/`
   - Exemplo: criar `NewFeatureCtr.ts`
   - Padrão: implementar seguindo formato do template `_template.ts`
   - Registro: exportar em `apps/desktop/src/main/controllers/index.ts`

2. **Definir Manipuladores de Eventos IPC**
   - Usar decorador `@ipcClientEvent('eventName')` para registrar função de manipulação de eventos
   - Função de manipulação deve receber parâmetros passados pelo frontend e retornar resultado
   - Lidar com possíveis situações de erro

3. **Implementar Lógica de Negócio**
   - Pode ser necessário chamar APIs do Electron ou módulos nativos do Node.js
   - Para funcionalidades complexas, pode criar classes de serviço especializadas (`services/`)

### 3. Definir Tipos de Comunicação IPC

1. **Adicionar novos tipos nas definições de tipo compartilhadas**
   - Localização: `packages/electron-client-ipc/src/types.ts`
   - Adicionar interface de tipo de parâmetro (como `NewFeatureParams`)
   - Adicionar interface de tipo de resultado retornado (como `NewFeatureResult`)

### 4. Implementar Funcionalidade Frontend no Processo de Renderização

1. **Criar Camada de Serviço**
   - Localização: `src/services/electron/`
   - Adicionar método de serviço para chamar IPC
   - Usar funções `dispatch` ou `invoke`

   ```typescript
   // src/services/electron/newFeatureService.ts
   import { dispatch } from '@lobechat/electron-client-ipc';
   import { NewFeatureParams } from 'types';

   export const newFeatureService = async (params: NewFeatureParams) => {
     return dispatch('newFeatureEventName', params);
   };
   ```

2. **Implementar Store Action**
   - Localização: `src/store/`
   - Adicionar lógica de atualização de estado e tratamento de erros

3. **Adicionar Componentes de UI**
   - Adicionar componentes de UI em local apropriado conforme necessário
   - Chamar funcionalidade através de camada Store ou Service

### 5. Se for Nova Ferramenta Integrada, Seguir Fluxo de Implementação de Ferramentas

Consulte [desktop-local-tools-implement.mdc](mdc:desktop-local-tools-implement.mdc) para saber mais sobre os passos detalhados para adicionar ferramentas integradas.

### 6. Adicionar Testes

1. **Testes Unitários**
   - Localização: `apps/desktop/src/main/controllers/__tests__/`
   - Testar funcionalidade de componentes do processo principal

2. **Testes de Integração**
   - Testar comunicação IPC e fluxo completo de funcionalidade

## Melhores Práticas

1. **Considerações de Segurança**
   - Lidar com cuidado com dados do usuário e acesso ao sistema de arquivos
   - Validar e limpar adequadamente dados de entrada
   - Limitar escopo de APIs expostas ao processo de renderização

2. **Otimização de Performance**
   - Para operações demoradas, considerar usar métodos assíncronos
   - Para transferência de grandes volumes de dados, considerar processamento em lotes

3. **Experiência do Usuário**
   - Adicionar indicadores de progresso para operações de longa duração
   - Fornecer feedback de erro apropriado
   - Considerar reversibilidade de operações

4. **Organização de Código**
   - Seguir convenções de nomenclatura e estilo de código existentes do projeto
   - Adicionar documentação e comentários apropriados para novas funcionalidades
   - Modularização de funcionalidades, evitar acoplamento excessivo

## Exemplo: Implementando Funcionalidade de Notificação do Sistema

```typescript
// apps/desktop/src/main/controllers/NotificationCtr.ts
import { BrowserWindow, Notification } from 'electron';
import { ipcClientEvent } from 'electron-client-ipc';

interface ShowNotificationParams {
  title: string;
  body: string;
}

export class NotificationCtr {
  @ipcClientEvent('showNotification')
  async handleShowNotification({ title, body }: ShowNotificationParams) {
    try {
      if (!Notification.isSupported()) {
        return { success: false, error: 'Notifications not supported' };
      }

      const notification = new Notification({
        title,
        body,
      });

      notification.show();

      return { success: true };
    } catch (error) {
      console.error('Failed to show notification:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
}
```