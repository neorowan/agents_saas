---
description:
globs:
alwaysApply: false
---
**Fluxo de Adição de Nova Ferramenta Desktop:**

1.  **Definir Interface da Ferramenta (Manifest):**
    *   **Arquivo:** `src/tools/[tool_category]/index.ts` (exemplo: `src/tools/local-files/index.ts`)
    *   **Operação:**
        *   No objeto `ApiName` (exemplo `LocalFilesApiName`), adicionar um novo nome de API único.
        *   No array `api` do objeto `Manifest` (exemplo `LocalFilesManifest`), adicionar um novo objeto para definir a interface da nova ferramenta.
        *   **Campos-chave:**
            *   `name`: Usar o nome da API definido no passo anterior.
            *   `description`: Descrever claramente a funcionalidade da ferramenta, para entendimento do Agent e exibição ao usuário.
            *   `parameters`: Usar JSON Schema para definir os parâmetros de entrada necessários para a ferramenta.
                *   `type`: Geralmente é 'object'.
                *   `properties`: Definir nome de cada parâmetro, `description`, `type` (string, number, boolean, array, etc.), usar inglês.
                *   `required`: Um array de strings, listando os nomes dos parâmetros que devem ser fornecidos.

2.  **Definir Tipos Relacionados:**
    *   **Arquivo 1:** `packages/electron-client-ipc/src/types.ts` (ou arquivo de tipos IPC compartilhados similar)
        *   **Operação:** Definir interface de tipo de parâmetro passado para evento IPC (exemplo: `RenameLocalFileParams`, `MoveLocalFileParams`). Garantir consistência com `parameters` definidos no Manifest.
    *   **Arquivo 2:** `src/tools/[tool_category]/type.ts` (exemplo: `src/tools/local-files/type.ts`)
        *   **Operação:** Definir interface de tipo de estado armazenado no Zustand Store do frontend após execução desta ferramenta (exemplo: `LocalRenameFileState`, `LocalMoveFileState`). Isso geralmente inclui resultado da operação (sucesso/falha), informação de erro e dados relacionados (como caminho antigo, caminho novo, etc.).

3.  **Implementar Gerenciamento de Estado Frontend (Store Action):**
    *   **Arquivo:** `src/store/chat/slices/builtinTool/actions/[tool_category].ts` (exemplo: `src/store/chat/slices/builtinTool/actions/localFile.ts`)
    *   **Operação:**
        *   Importar tipos de parâmetro IPC e tipos de estado definidos no passo 2.
        *   Na interface Action (exemplo: `LocalFileAction`), adicionar assinatura do método da nova Action, usando o tipo de parâmetro IPC correspondente.
        *   No `createSlice` (exemplo: `localFileSlice`), implementar o método Action:
            *   Receber `id` (ID da mensagem) e `params` (conforme tipo de parâmetro IPC).
            *   Definir estado de carregamento (`toggleLocalFileLoading(id, true)`).
            *   Chamar método da camada `Service` correspondente (ver passo 4), passando `params`.
            *   Usar `try...catch` para lidar com possíveis erros da chamada do `Service`.
            *   **Em caso de sucesso:**
                *   Chamar `updatePluginState(id, {...})` para atualizar estado do plugin, usando tipo de estado definido no passo 2.
                *   Chamar `internal_updateMessageContent(id, JSON.stringify({...}))` para atualizar conteúdo da mensagem, geralmente incluindo informação de confirmação de sucesso.
            *   **Em caso de falha:**
                *   Registrar erro (`console.error`).
                *   Chamar `updatePluginState(id, {...})` para atualizar estado do plugin, incluindo informação de erro.
                *   Chamar `internal_updateMessagePluginError(id, {...})` para definir estado de erro da mensagem.
                *   Chamar `internal_updateMessageContent(id, JSON.stringify({...}))` para atualizar conteúdo da mensagem, incluindo informação de erro.
            *   No bloco `finally`, cancelar estado de carregamento (`toggleLocalFileLoading(id, false)`).
            *   Retornar se a operação foi bem-sucedida (`boolean`).

4.  **Implementar Camada Service (Chamar IPC):**
    *   **Arquivo:** `src/services/electron/[tool_category]Service.ts` (exemplo: `src/services/electron/localFileService.ts`)
    *   **Operação:**
        *   Importar tipos de parâmetro IPC definidos no passo 2.
        *   Adicionar um novo método `async`, nome do método geralmente corresponde ao nome da Action (exemplo: `renameLocalFile`).
        *   Método recebe `params` (conforme tipo de parâmetro IPC).
        *   Usar função `dispatch` (ou `invoke`) importada de `@lobechat/electron-client-ipc`, chamar nome de evento IPC que corresponde ao campo `name` no Manifest, e passar `params`.
        *   Definir tipo de retorno do método, geralmente é `Promise<{ success: boolean; error?: string }>`, consistente com estrutura retornada pelo Controller backend.

5.  **Implementar Lógica Backend (Controller / IPC Handler):**
    *   **Arquivo:** `apps/desktop/src/main/controllers/[ToolName]Ctr.ts` (exemplo: `apps/desktop/src/main/controllers/LocalFileCtr.ts`)
    *   **Operação:**
        *   Importar módulos relacionados do Node.js (`fs`, `path`, etc.) e dependências relacionadas ao IPC (`ipcClientEvent`, tipos de parâmetro, etc.).
        *   Adicionar um novo método `async`, nome do método geralmente começa com `handle` (exemplo: `handleRenameFile`).
        *   Usar decorador `@ipcClientEvent('yourApiName')` para registrar este método como manipulador do evento IPC correspondente, garantir que `'yourApiName'` seja consistente com `name` no Manifest e nome do evento chamado pela camada Service.
        *   Parâmetros do método devem ser desestruturados do objeto passado pela camada Service, tipo corresponde ao tipo de parâmetro IPC definido no passo 2.
        *   Implementar lógica de negócio central:
            *   Realizar validação de entrada necessária.
            *   Executar operações do sistema de arquivos ou outras tarefas backend (exemplo: `fs.promises.rename`).
            *   Usar `try...catch` para capturar erros durante execução.
            *   Lidar com códigos de erro específicos (`error.code`) para fornecer mensagens de erro mais amigáveis.
        *   Retornar um objeto contendo campo `success` (boolean) e campo opcional `error` (string).

6.  **Atualizar Documentação do Agent (System Role):**
    *   **Arquivo:** `src/tools/[tool_category]/systemRole.ts` (exemplo: `src/tools/local-files/systemRole.ts`)
    *   **Operação:**
        *   Na seção `<core_capabilities>`, adicionar breve descrição da nova ferramenta.
        *   Se necessário, atualizar `<workflow>`.
        *   Na seção `<tool_usage_guidelines>`, adicionar instruções de uso detalhadas para a nova ferramenta, explicando seus parâmetros, propósito e comportamento esperado.
        *   Se necessário, atualizar `<security_considerations>`.
        *   Se necessário (exemplo: ferramenta retornou nova estrutura de dados ou caminhos), atualizar exemplos em `<response_format>`.

Seguindo esses passos, é possível integrar sistematicamente novas ferramentas desktop ao sistema de plugins do Agents Chat.