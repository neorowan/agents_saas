---
description:
globs:
alwaysApply: false
---
**Guia de Configuração de Menu Desktop**

## Visão Geral do Sistema de Menus

A aplicação desktop do Agents Chat possui três tipos principais de menus:

1. **Menu da Aplicação (App Menu)**: Exibido no topo da janela da aplicação (macOS) ou na barra de título da janela (Windows/Linux)
2. **Menu de Contexto (Context Menu)**: Menu exibido ao clicar com o botão direito
3. **Menu da Bandeja (Tray Menu)**: Menu exibido ao clicar no ícone da bandeja do sistema

## Estrutura de Arquivos Relacionados aos Menus

```
apps/desktop/src/main/
├── menus/                 # Definições de menu
│   ├── appMenu.ts         # Configuração do menu da aplicação
│   ├── contextMenu.ts     # Configuração do menu de contexto
│   └── factory.ts         # Funções de fábrica de menu
├── controllers/
│   ├── MenuCtr.ts         # Controlador de menu
│   └── TrayMenuCtr.ts     # Controlador de menu da bandeja
```

## Fluxo de Configuração de Menu

### 1. Configuração do Menu da Aplicação

O menu da aplicação é definido em `apps/desktop/src/main/menus/appMenu.ts`:

1. **Importar dependências**
   ```typescript
   import { app, BrowserWindow, Menu, MenuItem, MenuItemConstructorOptions } from 'electron';
   import { is } from 'electron-util';
   ```

2. **Definir itens de menu**
   - Usar tipo `MenuItemConstructorOptions` para definir estrutura de menu
   - Cada item de menu pode incluir: label, accelerator (atalho), role, submenu, click, etc.

3. **Criar função de fábrica de menu**
   ```typescript
   export const createAppMenu = (win: BrowserWindow) => {
     const template = [
       // Definir itens de menu...
     ];

     return Menu.buildFromTemplate(template);
   };
   ```

4. **Registrar menu**
   - No controlador `MenuCtr.ts`, usar `Menu.setApplicationMenu(menu)` para definir menu da aplicação

### 2. Configuração do Menu de Contexto

Menu de contexto é geralmente exibido ao clicar com o botão direito em elementos específicos:

1. **Definir template de menu no processo principal**
   ```typescript
   // apps/desktop/src/main/menus/contextMenu.ts
   export const createContextMenu = () => {
     const template = [
       // Definir itens de menu...
     ];

     return Menu.buildFromTemplate(template);
   };
   ```

2. **Exibir menu no manipulador de evento apropriado**
   ```typescript
   const menu = createContextMenu();
   menu.popup();
   ```

### 3. Configuração do Menu da Bandeja

Menu da bandeja é configurado em `TrayMenuCtr.ts`:

1. **Criar ícone da bandeja**
   ```typescript
   this.tray = new Tray(trayIconPath);
   ```

2. **Definir menu da bandeja**
   ```typescript
   const contextMenu = Menu.buildFromTemplate([
     { label: 'Mostrar janela principal', click: this.showMainWindow },
     { type: 'separator' },
     { label: 'Sair', click: () => app.quit() },
   ]);
   ```

3. **Definir menu da bandeja**
   ```typescript
   this.tray.setContextMenu(contextMenu);
   ```

## Suporte Multilíngue

Adicionar suporte multilíngue aos menus:

1. **Importar ferramentas de localização**
   ```typescript
   import { i18n } from '../locales';
   ```

2. **Usar função de tradução**
   ```typescript
   const template = [
     {
       label: i18n.t('menu.file'),
       submenu: [
         { label: i18n.t('menu.new'), click: createNew },
         // ...
       ]
     },
     // ...
   ];
   ```

3. **Atualizar menu ao mudar idioma**
   No `MenuCtr.ts`, monitorar eventos de mudança de idioma e recriar menu

## Fluxo para Adicionar Novos Itens de Menu

1. **Determinar posição do menu**
   - Decidir a qual menu adicionar (menu da aplicação, menu de contexto ou menu da bandeja)
   - Determinar posição no menu (item de menu principal ou submenu)

2. **Definir item de menu**
   ```typescript
   const newMenuItem: MenuItemConstructorOptions = {
     label: 'Nova funcionalidade',
     accelerator: 'CmdOrCtrl+N',
     click: (_, window) => {
       // Tratar evento de clique
       if (window) window.webContents.send('trigger-new-feature');
     }
   };
   ```

3. **Adicionar ao template de menu**
   Adicionar novo item de menu ao template de menu correspondente

4. **Para funcionalidades que interagem com processo de renderização**
   - Usar `window.webContents.send()` para enviar mensagem IPC ao processo de renderização
   - Monitorar e tratar essa mensagem no processo de renderização

## Controle de Ativação/Desativação de Itens de Menu

Controlar dinamicamente o estado dos itens de menu:

1. **Salvar referência aos itens de menu**
   ```typescript
   this.menuItems = {};
   const menu = Menu.buildFromTemplate(template);
   this.menuItems.newFeature = menu.getMenuItemById('new-feature');
   ```

2. **Atualizar estado baseado em condições**
   ```typescript
   updateMenuState(state) {
     if (this.menuItems.newFeature) {
       this.menuItems.newFeature.enabled = state.canUseNewFeature;
     }
   }
   ```

## Melhores Práticas

1. **Usar papéis padrão**
   - Usar papéis predefinidos do Electron (como `role: 'copy'`) sempre que possível para obter localização e comportamento consistente

2. **Menus específicos de plataforma**
   - Usar `process.platform` para verificar e fornecer menus diferentes para plataformas diferentes
   ```typescript
   if (process.platform === 'darwin') {
     template.unshift({ role: 'appMenu' });
   }
   ```

3. **Conflitos de atalhos**
   - Evitar conflitos com atalhos do sistema
   - Usar `CmdOrCtrl` ao invés de `Ctrl` para suportar macOS e Windows/Linux

4. **Manter menus concisos**
   - Evitar muitos submenus aninhados
   - Agrupar funcionalidades relacionadas

5. **Adicionar separadores**
   - Usar `{ type: 'separator' }` para separar logicamente diferentes grupos de itens de menu