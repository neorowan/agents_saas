---
description:
globs:
alwaysApply: false
---
**Guia de Gerenciamento de Janelas Desktop**

## Visão Geral do Gerenciamento de Janelas

A aplicação desktop do Agents Chat usa o `BrowserWindow` do Electron para gerenciar janelas da aplicação. As principais funcionalidades de gerenciamento de janelas incluem:

1. **Criação e configuração de janelas**
2. **Gerenciamento de estado de janelas** (tamanho, posição, maximização, etc.)
3. **Coordenação de múltiplas janelas**
4. **Tratamento de eventos de janela**

## Estrutura de Arquivos Relacionados

```
apps/desktop/src/main/
├── appBrowsers.ts               # Arquivo central de gerenciamento de janelas
├── controllers/
│   └── BrowserWindowsCtr.ts     # Controlador de janelas
└── modules/
    └── browserWindowManager.ts  # Módulo de gerenciamento de janelas
```

## Fluxo de Gerenciamento de Janelas

### 1. Criação de Janelas

Defina a lógica de criação de janelas em `appBrowsers.ts` ou `BrowserWindowsCtr.ts`:

```typescript
export const createMainWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    minWidth: 600,
    minHeight: 400,
    webPreferences: {
      preload: path.join(__dirname, '../preload/index.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
    // Outras opções de configuração de janela...
  });

  // Carregar conteúdo da aplicação
  if (isDev) {
    mainWindow.loadURL('http://localhost:3000');
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.loadFile(path.join(__dirname, '../../renderer/index.html'));
  }

  return mainWindow;
};
```

### 2. Gerenciamento de Estado de Janelas

Implementar persistência e restauração de estado de janelas:

1. **Salvar estado da janela**
   ```typescript
   const saveWindowState = (window: BrowserWindow) => {
     if (!window.isMinimized() && !window.isMaximized()) {
       const position = window.getPosition();
       const size = window.getSize();

       settings.set('windowState', {
         x: position[0],
         y: position[1],
         width: size[0],
         height: size[1],
       });
     }
   };
   ```

2. **Restaurar estado da janela**
   ```typescript
   const restoreWindowState = (window: BrowserWindow) => {
     const savedState = settings.get('windowState');

     if (savedState) {
       window.setBounds({
         x: savedState.x,
         y: savedState.y,
         width: savedState.width,
         height: savedState.height,
       });
     }
   };
   ```

3. **Monitorar eventos de janela**
   ```typescript
   window.on('close', () => saveWindowState(window));
   window.on('moved', () => saveWindowState(window));
   window.on('resized', () => saveWindowState(window));
   ```

### 3. Implementar Gerenciamento de Múltiplas Janelas

Para funcionalidades que requerem suporte a múltiplas janelas:

1. **Rastrear janelas**
   ```typescript
   export class WindowManager {
     private windows: Map<string, BrowserWindow> = new Map();

     createWindow(id: string, options: BrowserWindowConstructorOptions) {
       const window = new BrowserWindow(options);
       this.windows.set(id, window);

       window.on('closed', () => {
         this.windows.delete(id);
       });

       return window;
     }

     getWindow(id: string) {
       return this.windows.get(id);
     }

     getAllWindows() {
       return Array.from(this.windows.values());
     }
   }
   ```

2. **Comunicação entre janelas**
   ```typescript
   // Enviar mensagem de uma janela para outra
   sendMessageToWindow(targetWindowId, channel, data) {
     const targetWindow = this.getWindow(targetWindowId);
     if (targetWindow) {
       targetWindow.webContents.send(channel, data);
     }
   }
   ```

### 4. Comunicação entre Janela e Processo de Renderização

Implementar operações de janela através de IPC:

1. **Registrar manipuladores IPC no processo principal**
   ```typescript
   // BrowserWindowsCtr.ts
   @ipcClientEvent('minimizeWindow')
   handleMinimizeWindow() {
     const focusedWindow = BrowserWindow.getFocusedWindow();
     if (focusedWindow) {
       focusedWindow.minimize();
     }
     return { success: true };
   }

   @ipcClientEvent('maximizeWindow')
   handleMaximizeWindow() {
     const focusedWindow = BrowserWindow.getFocusedWindow();
     if (focusedWindow) {
       if (focusedWindow.isMaximized()) {
         focusedWindow.restore();
       } else {
         focusedWindow.maximize();
       }
     }
     return { success: true };
   }

   @ipcClientEvent('closeWindow')
   handleCloseWindow() {
     const focusedWindow = BrowserWindow.getFocusedWindow();
     if (focusedWindow) {
       focusedWindow.close();
     }
     return { success: true };
   }
   ```

2. **Chamar no processo de renderização**
   ```typescript
   // src/services/electron/windowService.ts
   import { dispatch } from '@lobechat/electron-client-ipc';

   export const windowService = {
     minimize: () => dispatch('minimizeWindow'),
     maximize: () => dispatch('maximizeWindow'),
     close: () => dispatch('closeWindow'),
   };
   ```

### 5. Controle Personalizado de Janela (janela sem bordas)

Para barra de título personalizada de janela:

1. **Criar janela sem bordas**
   ```typescript
   const window = new BrowserWindow({
     frame: false,
     titleBarStyle: 'hidden',
     // Outras opções...
   });
   ```

2. **Implementar área de arraste no processo de renderização**
   ```css
   /* CSS */
   .titlebar {
     -webkit-app-region: drag;
   }

   .titlebar-button {
     -webkit-app-region: no-drag;
   }
   ```

## Melhores Práticas

1. **Considerações de Performance**
   - Evitar criar muitas janelas
   - Usar `show: false` ao criar janela, mostrar após carregamento do conteúdo para evitar tela branca

2. **Segurança**
   - Sempre definir `webPreferences` adequadas para garantir segurança
   ```typescript
   webPreferences: {
     preload: path.join(__dirname, '../preload/index.js'),
     contextIsolation: true,
     nodeIntegration: false,
     sandbox: true,
   }
   ```

3. **Compatibilidade Multiplataforma**
   - Considerar diferenças de comportamento de janela entre sistemas operacionais
   - Usar `process.platform` para fornecer implementações específicas para diferentes plataformas

4. **Recuperação de Falhas**
   - Monitorar evento `webContents.on('crashed')` para lidar com falhas
   - Fornecer opções de recuperação de falhas

5. **Gerenciamento de Memória**
   - Garantir limpeza de todos os recursos relacionados quando janela fechar
   - Usar `window.on('closed')` ao invés de `window.on('close')` para limpeza final

## Exemplo: Criando Janela de Configurações

```typescript
// apps/desktop/src/main/controllers/BrowserWindowsCtr.ts

@ipcClientEvent('openSettings')
handleOpenSettings() {
  // Verificar se janela de configurações já existe
  if (this.settingsWindow && !this.settingsWindow.isDestroyed()) {
    // Se janela já existe, trazê-la para frente
    this.settingsWindow.focus();
    return { success: true };
  }

  // Criar nova janela
  this.settingsWindow = new BrowserWindow({
    width: 800,
    height: 600,
    title: 'Settings',
    parent: this.mainWindow, // Definir janela pai, tornando-a janela modal
    modal: true,
    webPreferences: {
      preload: path.join(__dirname, '../preload/index.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // Carregar página de configurações
  if (isDev) {
    this.settingsWindow.loadURL('http://localhost:3000/settings');
  } else {
    this.settingsWindow.loadFile(
      path.join(__dirname, '../../renderer/index.html'),
      { hash: 'settings' }
    );
  }

  // Monitorar evento de fechamento de janela
  this.settingsWindow.on('closed', () => {
    this.settingsWindow = null;
  });

  return { success: true };
}
```