---
description: 
globs: 
alwaysApply: true
---
# Guia do Sistema de Regras Cursor do Agents Chat

Este documento explica como funciona o sistema de regras Cursor do projeto Agents Chat e serve como um índice para regras acessíveis manualmente.

## 🎯 Princípio Central

**Todas as regras são iguais** - não há prioridades ou "recomendações" entre diferentes fontes de regras. Você deve seguir todas as regras aplicáveis simultaneamente.

## 📚 Quatro Formas de Acessar Regras

### 1. **Regras Sempre Aplicadas** - `always_applied_workspace_rules`
- **O que**: Diretrizes centrais do projeto que estão sempre ativas
- **Conteúdo**: Stack tecnológica do projeto, padrões básicos de codificação, regras de formatação de saída
- **Acesso**: Nenhuma ferramenta necessária - fornecidas automaticamente em toda conversa

### 2. **Regras de Contexto Dinâmico** - `cursor_rules_context`
- **O que**: Regras automaticamente correspondidas baseadas em arquivos referenciados na conversa
- **Ativação**: Apenas quando o usuário **explicitamente @ menciona arquivos** ou **abre arquivos no Cursor**
- **Conteúdo**: Pode incluir descrições breves ou conteúdo completo da regra, dependendo da relevância
- **Acesso**: Nenhuma ferramenta necessária - atualizada automaticamente quando arquivos são referenciados

### 3. **Regras Solicitáveis pelo Agente** - `agent_requestable_workspace_rules`
- **O que**: Guias operacionais detalhados que podem ser solicitados sob demanda
- **Acesso**: Use ferramenta `fetch_rules` com nomes das regras
- **Exemplos**: `debug`, `i18n/i18n`, `code-review`

### 4. **Índice de Regras Manuais** - Este arquivo + `read_file`
- **O que**: Regras adicionais não cobertas pelos mecanismos acima
- **Por que necessário**: O sistema de regras do Cursor apenas suporta modos "solicitação do agente" ou "anexo automático"
- **Acesso**: Use ferramenta `read_file` para ler arquivos `.mdc` específicos

## 🔧 Quando Usar `read_file` para Regras

Use `read_file` para acessar regras do índice abaixo quando:

1. **Identificação de lacuna**: Você determina que uma regra é necessária para a tarefa atual
2. **Sem ativação automática**: A regra não é fornecida em `cursor_rules_context` (porque arquivos relevantes não foram @ mencionados)
3. **Não solicitável pelo agente**: A regra não está disponível via `fetch_rules`

## 📋 Índice de Regras Disponíveis

As seguintes regras estão disponíveis via `read_file` do diretório `.cursor/rules/`:

- `backend-architecture.mdc` – Arquitetura de camadas backend e diretrizes de design
- `zustand-action-patterns.mdc` – Padrões recomendados para organizar actions Zustand
- `zustand-slice-organization.mdc` – Melhores práticas para estruturar slices Zustand
- `drizzle-schema-style-guide.mdc` – Guia de estilo para definir schemas Drizzle ORM
- `react-component.mdc` – Guia de estilo e convenções de componentes React

## ❌ Mal-entendidos Comuns a Evitar

1. **"Confusão de prioridade"**: Não há hierarquia entre fontes de regras - elas são complementares, não competitivas
2. **"Expectativas dinâmicas"**: `cursor_rules_context` apenas atualiza quando você @ arquivos - não incluirá automaticamente regras para tarefas sobre as quais você está pensando
3. **"Redundância de ferramentas"**: Cada método de acesso serve um propósito diferente - não são alternativas para escolher

## 🛠️ Fluxo de Trabalho Prático

```
1. Comece com always_applied_workspace_rules (automático)
2. Verifique cursor_rules_context para regras auto-correspondidas (automático) 
3. Se você precisar de guias específicos: fetch_rules (manual)
4. Se você identificar lacunas: consulte este índice → read_file (manual)
```

## Exemplo de Fluxo de Decisão

**Cenário**: Trabalhando em um novo slice de store Zustand
1. Siga always_applied_workspace_rules ✅
2. Se arquivos de store foram @ mencionados → use regras cursor_rules_context ✅  
3. Precisa de orientação detalhada sobre Zustand → `read_file('.cursor/rules/zustand-slice-organization.mdc')` ✅
4. Todas as regras se aplicam simultaneamente - sem conflitos ✅