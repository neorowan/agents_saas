---
description: 
globs: *.test.ts,*.test.tsx
alwaysApply: false
---
---
type: agent-requested
title: Guia de Testes - LobeChat Testing Guide
description: Guia de configura√ß√£o do ambiente de teste Vitest, m√©todos de execu√ß√£o e princ√≠pios de corre√ß√£o para o projeto LobeChat
---

# Guia de Testes - LobeChat Testing Guide

## üß™ Vis√£o Geral do Ambiente de Teste

O projeto LobeChat usa a biblioteca de testes Vitest, configurada com dois ambientes de teste diferentes:

### Ambiente de Teste Cliente (DOM Environment)

- **Arquivo de configura√ß√£o**: [vitest.config.ts](mdc:vitest.config.ts)
- **Ambiente**: Happy DOM (simula√ß√£o de ambiente de navegador)
- **Banco de dados**: PGLite (PostgreSQL para ambiente de navegador)
- **Uso**: Testar componentes frontend, l√≥gica cliente, componentes React, etc.
- **Arquivo de configura√ß√£o**: [tests/setup.ts](mdc:tests/setup.ts)

### Ambiente de Teste Servidor (Node Environment)

- **Arquivo de configura√ß√£o**: [vitest.config.server.ts](mdc:vitest.config.server.ts)
- **Ambiente**: Node.js
- **Banco de dados**: Banco de dados PostgreSQL real
- **Limita√ß√£o de concorr√™ncia**: Execu√ß√£o single-thread (`singleFork: true`)
- **Uso**: Testar modelos de banco de dados, l√≥gica servidor, endpoints de API, etc.
- **Arquivo de configura√ß√£o**: [tests/setup-db.ts](mdc:tests/setup-db.ts)

## üöÄ Comandos de Execu√ß√£o de Testes

### Explica√ß√£o dos Scripts do package.json

Veja os scripts relacionados a testes no [package.json](mdc:package.json):

```json
{
    "test": "npm run test-app && npm run test-server",
    "test-app": "vitest run --config vitest.config.ts",
    "test-app:coverage": "vitest run --config vitest.config.ts --coverage",
    "test-server": "vitest run --config vitest.config.server.ts",
    "test-server:coverage": "vitest run --config vitest.config.server.ts --coverage"
}
```

### Forma Recomendada de Execu√ß√£o de Testes

#### ‚úÖ Formato de Comando Correto

```bash
# Executar todos os testes cliente
npx vitest run --config vitest.config.ts

# Executar todos os testes servidor
npx vitest run --config vitest.config.server.ts

# Executar arquivo de teste espec√≠fico (suporte a correspond√™ncia difusa)
npx vitest run --config vitest.config.ts basic
npx vitest run --config vitest.config.ts user.test.ts

# Executar linha espec√≠fica de arquivo espec√≠fico
npx vitest run --config vitest.config.ts src/utils/helper.test.ts:25
npx vitest run --config vitest.config.ts basic/foo.test.ts:10,basic/foo.test.ts:25

# Filtrar casos de teste espec√≠ficos por nome
npx vitest -t "test case name" --config vitest.config.ts

# Usar combina√ß√£o de filtros por arquivo e nome de teste
npx vitest run --config vitest.config.ts filename.test.ts -t "specific test"
```

#### ‚ùå Formatos de Comando a Evitar

```bash
# ‚ùå N√£o use pnpm test xxx (este n√£o √© um comando vitest v√°lido)
pnpm test some-file

# ‚ùå N√£o use vitest puro (entrar√° em modo watch)
vitest test-file.test.ts

# ‚ùå N√£o confunda ambientes de teste
npx vitest run --config vitest.config.server.ts client-component.test.ts
```

### Explica√ß√£o dos Par√¢metros de Execu√ß√£o Principais

- **`vitest run`**: Executa os testes uma vez e sai (evita modo watch)
- **`vitest`**: Entra no modo watch por padr√£o, monitorando continuamente mudan√ßas de arquivo
- **`--config`**: Especifica arquivo de configura√ß√£o, escolhendo o ambiente de teste correto
- **`-t`**: Filtra casos de teste por nome, suporta express√µes regulares
- **`--coverage`**: Gera relat√≥rio de cobertura de teste

## üîß Princ√≠pios de Corre√ß√£o de Testes

### Princ√≠pios Fundamentais ‚ö†Ô∏è

1. **Leia completamente o c√≥digo de teste**: Antes de corrigir testes, deve compreender totalmente a inten√ß√£o e implementa√ß√£o do teste
2. **Priorize a corre√ß√£o do teste**: Se o pr√≥prio teste estiver errado, modifique o teste em vez do c√≥digo de implementa√ß√£o
3. **Foque em um √∫nico problema**: Corrija apenas o teste especificado, n√£o adicione testes ou funcionalidades extras
4. **N√£o tome iniciativas pr√≥prias**: N√£o modifique diretamente ao descobrir outros problemas, proponha primeiro para discuss√£o

### Fluxo de Corre√ß√£o de Testes

```mermaid
flowchart TD
    subgraph "Etapa 1: An√°lise e Reprodu√ß√£o"
        A[In√≠cio: Recebido relat√≥rio de falha de teste] --> B[Localizar e executar teste com falha];
        B --> C{Consegue reproduzir localmente?};
        C -->|N√£o| D[Verificar ambiente/configura√ß√£o/depend√™ncias de teste];
        C -->|Sim| E[Analisar: Ler c√≥digo de teste, logs de erro, hist√≥rico Git];
    end

    subgraph "Etapa 2: Diagn√≥stico e Debug"
        E --> F[Estabelecer hip√≥tese: Problema est√° no teste, c√≥digo ou ambiente?];
        F --> G["Debug: Usar console.log ou debugger para inspe√ß√£o profunda"];
        G --> H{Hip√≥tese foi confirmada?};
        H -->|N√£o, nova hip√≥tese| F;
    end

    subgraph "Etapa 3: Corre√ß√£o e Valida√ß√£o"
        H -->|Sim| I{Determinar causa raiz};
        I -->|Erro l√≥gico no teste| J[Corrigir c√≥digo de teste];
        I -->|Bug no c√≥digo de implementa√ß√£o| K[Corrigir c√≥digo de implementa√ß√£o];
        I -->|Problema de ambiente/configura√ß√£o| L[Corrigir configura√ß√£o ou depend√™ncias];
        J --> M[Validar corre√ß√£o: Re-executar teste com falha];
        K --> M;
        L --> M;
        M --> N{Teste passou?};
        N -->|N√£o, corre√ß√£o ineficaz| F;
        N -->|Sim| O[Expandir valida√ß√£o: Executar todos os testes do arquivo atual];
        O --> P{Todos passaram?};
        P -->|N√£o, introduziu novos problemas| F;
    end

    subgraph "Etapa 4: Resumo"
        P -->|Sim| Q[Conclu√≠do: Escrever resumo da corre√ß√£o];
    end

    D --> F;
```

### Resumo Ap√≥s Conclus√£o da Corre√ß√£o

Ap√≥s concluir a corre√ß√£o do teste, deve fornecer uma breve explica√ß√£o, incluindo:

1. **An√°lise da causa do erro**: Explicar a causa raiz da falha do teste
    - Erro l√≥gico no teste
    - Bug no c√≥digo de implementa√ß√£o
    - Problema de configura√ß√£o do ambiente
    - Problema causado por mudan√ßas de depend√™ncias

2. **Explica√ß√£o do m√©todo de corre√ß√£o**: Descrever brevemente o m√©todo de corre√ß√£o adotado
    - Quais arquivos foram modificados
    - Qual solu√ß√£o foi adotada
    - Por que escolheu esse m√©todo de corre√ß√£o

**Formato de exemplo**:

```markdown
## Resumo da Corre√ß√£o de Teste

**Causa do erro**: O formato dos dados mock no teste n√£o correspondia ao formato real de retorno da API, causando falha na asser√ß√£o.

**M√©todo de corre√ß√£o**: Atualizou a estrutura dos dados mock no arquivo de teste para manter consist√™ncia com o formato mais recente de resposta da API. Especificamente modificou a estrutura do objeto `mockUserData` em `user.test.ts`.
```

## üìÇ Organiza√ß√£o de Arquivos de Teste

### Conven√ß√µes de Nomenclatura de Arquivos

- **Testes cliente**: `*.test.ts`, `*.test.tsx` (qualquer localiza√ß√£o)
- **Testes servidor**: `src/database/models/**/*.test.ts`, `src/database/server/**/*.test.ts` (caminhos limitados)

### Estilo de Organiza√ß√£o de Arquivos de Teste

O projeto adota o estilo de organiza√ß√£o **arquivos de teste no mesmo diret√≥rio que os arquivos fonte**:

- Arquivos de teste s√£o colocados no mesmo diret√≥rio que os arquivos fonte correspondentes
- Formato de nomenclatura: `nomeArquivoOriginal.test.ts` ou `nomeArquivoOriginal.test.tsx`

Por exemplo:

```
src/components/Button/
‚îú‚îÄ‚îÄ index.tsx           # Arquivo fonte
‚îî‚îÄ‚îÄ index.test.tsx      # Arquivo de teste
```

## üõ†Ô∏è T√©cnicas de Debug de Teste

### Passos para Executar Testes com Falha

1. **Determinar tipo de teste**: Verificar o caminho do arquivo para determinar qual configura√ß√£o usar
2. **Executar teste individual**: Usar par√¢metro `-t` para isolar o problema
3. **Verificar logs de erro**: Ler cuidadosamente mensagens de erro e stack trace
4. **Verificar registros de modifica√ß√µes recentes**: Verificar mudan√ßas recentes em arquivos relacionados
5. **Adicionar logs de debug**: Adicionar `console.log` nos testes para entender o fluxo de execu√ß√£o

### Estrat√©gias de Teste para Interfaces IPC do Electron üñ•Ô∏è

Para testes envolvendo interfaces IPC do Electron, devido √† complexidade de fornecer um ambiente Electron real, adotamos a abordagem de **Mock de valores de retorno** para teste.

#### Configura√ß√£o B√°sica de Mock

```typescript
import { vi } from "vitest";
import { electronIpcClient } from "@/server/modules/ElectronIPCClient";

// Mock do cliente IPC do Electron
vi.mock("@/server/modules/ElectronIPCClient", () => ({
    electronIpcClient: {
        getFilePathById: vi.fn(),
        deleteFiles: vi.fn(),
        // Adicionar outros m√©todos IPC conforme necess√°rio
    },
}));
```

#### Configurando Comportamento Mock nos Testes

```typescript
beforeEach(() => {
    // Resetar todos os Mocks
    vi.resetAllMocks();

    // Configurar valores de retorno Mock padr√£o
    vi.mocked(electronIpcClient.getFilePathById).mockResolvedValue(
        "/path/to/file.txt"
    );
    vi.mocked(electronIpcClient.deleteFiles).mockResolvedValue({
        success: true,
    });
});
```

#### Exemplos de Teste para Diferentes Cen√°rios

```typescript
it("deve processar situa√ß√£o de exclus√£o de arquivo bem-sucedida", async () => {
    // Configurar Mock para cen√°rio de sucesso
    vi.mocked(electronIpcClient.deleteFiles).mockResolvedValue({
        success: true,
    });

    const result = await service.deleteFiles(["desktop://file1.txt"]);

    expect(electronIpcClient.deleteFiles).toHaveBeenCalledWith([
        "desktop://file1.txt",
    ]);
    expect(result.success).toBe(true);
});

it("deve processar situa√ß√£o de falha na exclus√£o de arquivo", async () => {
    // Configurar Mock para cen√°rio de falha
    vi.mocked(electronIpcClient.deleteFiles).mockRejectedValue(
        new Error("Exclus√£o falhou")
    );

    const result = await service.deleteFiles(["desktop://file1.txt"]);

    expect(result.success).toBe(false);
    expect(result.errors).toBeDefined();
});
```

#### Vantagens da Estrat√©gia Mock

1. **Simplifica√ß√£o do ambiente**: Evita a complexidade de configurar um ambiente Electron
2. **Testes control√°veis**: Permite controle preciso dos valores de retorno e comportamentos das chamadas IPC
3. **Cobertura de cen√°rios**: F√°cil de testar v√°rios cen√°rios de sucesso/falha
4. **Velocidade de execu√ß√£o**: Chamadas Mock s√£o mais r√°pidas que chamadas IPC reais

#### Considera√ß√µes Importantes

- **Precis√£o do Mock**: Garantir que o comportamento do Mock seja consistente com o comportamento real da interface IPC
- **Seguran√ßa de tipos**: Usar `vi.mocked()` para garantir seguran√ßa de tipos
- **Reset de Mock**: Resetar estado Mock no `beforeEach` para evitar interfer√™ncia entre testes
- **Valida√ß√£o de chamadas**: N√£o apenas validar valores de retorno, mas tamb√©m verificar se m√©todos IPC s√£o chamados corretamente

### Verificar Registros de Modifica√ß√µes Recentes üîç

Para melhor julgar a causa raiz da falha do teste, √© necess√°rio **verificar sistematicamente o hist√≥rico de modifica√ß√µes de arquivos relacionados**. Este √© um passo chave para localizar problemas.

#### Primeiro Passo: Determinar o Escopo de Arquivos a Verificar

1. **O pr√≥prio arquivo de teste**: `path/to/component.test.ts`
2. **Arquivo de implementa√ß√£o correspondente**: `path/to/component.ts` ou `path/to/component/index.ts`
3. **Arquivos de depend√™ncia relacionados**: Outros m√≥dulos importados no teste ou implementa√ß√£o

#### Segundo Passo: Verificar Status do Diret√≥rio de Trabalho Atual

```bash
# Ver status de todas as modifica√ß√µes n√£o commitadas
git status

# Focar se arquivos de teste e implementa√ß√£o t√™m modifica√ß√µes n√£o commitadas
git status | grep -E "(test|spec)"
```

#### Terceiro Passo: Verificar Conte√∫do de Modifica√ß√µes N√£o Commitadas

```bash
# Ver modifica√ß√µes n√£o commitadas do arquivo de teste (√°rea de trabalho vs √°rea de stage)
git diff path/to/component.test.ts | cat

# Ver modifica√ß√µes n√£o commitadas do arquivo de implementa√ß√£o correspondente
git diff path/to/component.ts | cat

# Ver modifica√ß√µes em stage mas n√£o commitadas
git diff --cached path/to/component.test.ts | cat
git diff --cached path/to/component.ts | cat
```

#### Á¨¨ÂõõÊ≠•ÔºöÊ£ÄÊü•Êèê‰∫§ÂéÜÂè≤ÂíåÊó∂Èó¥Áõ∏ÂÖ≥ÊÄß

**È¶ñÂÖàÊü•ÁúãÊèê‰∫§Êó∂Èó¥ÔºåÂà§Êñ≠‰øÆÊîπÁöÑÊó∂ÊïàÊÄß**Ôºö

```bash
# Êü•ÁúãÊµãËØïÊñá‰ª∂ÁöÑÊúÄËøëÊèê‰∫§ÂéÜÂè≤ÔºåÂåÖÂê´Êèê‰∫§Êó∂Èó¥
git log --pretty=format:"%h %ad %s" --date=relative -5 path/to/component.test.ts | cat

# Êü•ÁúãÂÆûÁé∞Êñá‰ª∂ÁöÑÊúÄËøëÊèê‰∫§ÂéÜÂè≤ÔºåÂåÖÂê´Êèê‰∫§Êó∂Èó¥
git log --pretty=format:"%h %ad %s" --date=relative -5 path/to/component.ts | cat

# Êü•ÁúãËØ¶ÁªÜÁöÑÊèê‰∫§Êó∂Èó¥ÔºàISOÊ†ºÂºèÔºå‰æø‰∫éÁ≤æÁ°ÆÂà§Êñ≠Ôºâ
git log --pretty=format:"%h %ad %an %s" --date=iso -3 path/to/component.ts | cat
git log --pretty=format:"%h %ad %an %s" --date=iso -3 path/to/component.test.ts | cat
```

**Âà§Êñ≠Êèê‰∫§ÁöÑÂèÇËÄÉ‰ª∑ÂÄº**Ôºö

1. **ÊúÄËøëÊèê‰∫§Ôºà24Â∞èÊó∂ÂÜÖÔºâ**: üî¥ **È´òÂ∫¶Áõ∏ÂÖ≥** - ÂæàÂèØËÉΩÊòØÂØºËá¥ÊµãËØïÂ§±Ë¥•ÁöÑÁõ¥Êé•ÂéüÂõ†
2. **ËøëÊúüÊèê‰∫§Ôºà1-7Â§©ÂÜÖÔºâ**: üü° **‰∏≠Á≠âÁõ∏ÂÖ≥** - ÂèØËÉΩÁõ∏ÂÖ≥ÔºåÈúÄË¶Å‰ªîÁªÜÂàÜÊûê‰øÆÊîπÂÜÖÂÆπ
3. **ËæÉÊó©Êèê‰∫§ÔºàË∂ÖËøá1Âë®Ôºâ**: ‚ö™ **‰ΩéÁõ∏ÂÖ≥ÊÄß** - Èô§ÈùûÊòØÈáçÂ§ßÈáçÊûÑÔºåÂê¶Âàô‰∏çÂ§™ÂèØËÉΩÊòØÁõ¥Êé•ÂéüÂõ†

#### Á¨¨‰∫îÊ≠•ÔºöÂü∫‰∫éÊó∂Èó¥Áõ∏ÂÖ≥ÊÄßÊü•ÁúãÂÖ∑‰Ωì‰øÆÊîπÂÜÖÂÆπ

**Ê†πÊçÆÊèê‰∫§Êó∂Èó¥ÁöÑËøúËøëÔºå‰ºòÂÖàÊü•ÁúãÊúÄËøëÁöÑ‰øÆÊîπ**Ôºö

```bash
# Â¶ÇÊûúÊúâ24Â∞èÊó∂ÂÜÖÁöÑÊèê‰∫§ÔºåÈáçÁÇπÊü•ÁúãËøô‰∫õ‰øÆÊîπ
git show HEAD -- path/to/component.test.ts | cat
git show HEAD -- path/to/component.ts | cat

# Êü•ÁúãÊ¨°Êñ∞ÁöÑÊèê‰∫§ÔºàÂ¶ÇÊûúÊúÄÊñ∞Êèê‰∫§Êó∂Èó¥ËæÉËøúÔºâ
git show HEAD~1 -- path/to/component.ts | cat
git show <recent-commit-hash> -- path/to/component.ts | cat

# ÂØπÊØîÊúÄËøë‰∏§Ê¨°Êèê‰∫§ÁöÑÂ∑ÆÂºÇ
git diff HEAD~1 HEAD -- path/to/component.ts | cat
```

#### Á¨¨ÂÖ≠Ê≠•ÔºöÂàÜÊûê‰øÆÊîπ‰∏éÊµãËØïÂ§±Ë¥•ÁöÑÂÖ≥Á≥ª

Âü∫‰∫é‰øÆÊîπËÆ∞ÂΩïÂíåÊó∂Èó¥Áõ∏ÂÖ≥ÊÄßÂà§Êñ≠Ôºö

1. **ÊúÄËøë‰øÆÊîπ‰∫ÜÂÆûÁé∞‰ª£Á†Å**:

    ```bash
    # ÈáçÁÇπÊ£ÄÊü•ÂÆûÁé∞ÈÄªËæëÁöÑÂèòÂåñ
    git diff HEAD~1 path/to/component.ts | cat
    ```

    - ÂæàÂèØËÉΩÊòØÂÆûÁé∞‰ª£Á†ÅÁöÑÂèòÊõ¥ÂØºËá¥ÊµãËØïÂ§±Ë¥•
    - Ê£ÄÊü•ÂÆûÁé∞ÈÄªËæëÊòØÂê¶Ê≠£Á°Æ
    - Á°ÆËÆ§ÊµãËØïÊòØÂê¶ÈúÄË¶ÅÁõ∏Â∫îÊõ¥Êñ∞

2. **ÊúÄËøë‰øÆÊîπ‰∫ÜÊµãËØï‰ª£Á†Å**:

    ```bash
    # ÈáçÁÇπÊ£ÄÊü•ÊµãËØïÈÄªËæëÁöÑÂèòÂåñ
    git diff HEAD~1 path/to/component.test.ts | cat
    ```

    - ÂèØËÉΩÊòØÊµãËØïÊú¨Ë∫´ÂÜôÈîô‰∫Ü
    - Ê£ÄÊü•ÊµãËØïÈÄªËæëÂíåÊñ≠Ë®ÄÊòØÂê¶Ê≠£Á°Æ
    - Á°ÆËÆ§ÊµãËØïÊòØÂê¶Á¨¶ÂêàÂÆûÁé∞ÁöÑÈ¢ÑÊúüË°å‰∏∫

3. **‰∏§ËÄÖÈÉΩÊúâÊúÄËøë‰øÆÊîπ**:

    ```bash
    # ÂØπÊØî‰∏§‰∏™Êñá‰ª∂ÁöÑ‰øÆÊîπÊó∂Èó¥
    git log --pretty=format:"%ad %f" --date=iso -1 path/to/component.ts | cat
    git log --pretty=format:"%ad %f" --date=iso -1 path/to/component.test.ts | cat
    ```

    - ÈúÄË¶ÅÁªºÂêàÂàÜÊûê‰∏§ËÄÖÁöÑ‰øÆÊîπ
    - Á°ÆÂÆöÂì™‰∏™‰øÆÊîπÊõ¥ÂèØËÉΩÂØºËá¥ÈóÆÈ¢ò
    - ‰ºòÂÖàÊ£ÄÊü•Êó∂Èó¥Êõ¥ËøëÁöÑ‰øÆÊîπ

4. **ÈÉΩÊ≤°ÊúâÊúÄËøë‰øÆÊîπ**:
    - ÂèØËÉΩÊòØ‰æùËµñÂèòÊõ¥ÊàñÁéØÂ¢ÉÈóÆÈ¢ò
    - Ê£ÄÊü• `package.json`„ÄÅÈÖçÁΩÆÊñá‰ª∂Á≠âÁöÑ‰øÆÊîπ
    - Êü•ÁúãÊòØÂê¶ÊúâÂÖ®Â±ÄÊÄßÁöÑ‰ª£Á†ÅÈáçÊûÑ

#### ‰øÆÊîπËÆ∞ÂΩïÊ£ÄÊü•Á§∫‰æã

```bash
# ÂÆåÊï¥ÁöÑÊ£ÄÊü•ÊµÅÁ®ãÁ§∫‰æã
echo "=== Ê£ÄÊü•Êñá‰ª∂‰øÆÊîπÁä∂ÊÄÅ ==="
git status | grep component

echo "=== Ê£ÄÊü•Êú™Êèê‰∫§‰øÆÊîπ ==="
git diff src/components/Button/index.test.tsx | cat
git diff src/components/Button/index.tsx | cat

echo "=== Ê£ÄÊü•Êèê‰∫§ÂéÜÂè≤ÂíåÊó∂Èó¥ ==="
git log --pretty=format:"%h %ad %s" --date=relative -3 src/components/Button/index.test.tsx | cat
git log --pretty=format:"%h %ad %s" --date=relative -3 src/components/Button/index.tsx | cat

echo "=== Ê†πÊçÆÊó∂Èó¥‰ºòÂÖàÁ∫ßÊü•Áúã‰øÆÊîπÂÜÖÂÆπ ==="
# Â¶ÇÊûúÊúâ24Â∞èÊó∂ÂÜÖÁöÑÊèê‰∫§ÔºåÈáçÁÇπÊü•Áúã
git show HEAD -- src/components/Button/index.tsx | cat
```

## üóÉÔ∏è Êï∞ÊçÆÂ∫ì Model ÊµãËØïÊåáÂçó

### ÊµãËØïÁéØÂ¢ÉÈÄâÊã© üí°

Êï∞ÊçÆÂ∫ì Model Â±ÇÈÄöËøáÁéØÂ¢ÉÂèòÈáèÊéßÂà∂Êï∞ÊçÆÂ∫ìÁ±ªÂûãÔºåÂú®‰∏§ÁßçÊµãËØïÁéØÂ¢É‰∏ãÊúâ‰∏çÂêåÁöÑÊï∞ÊçÆÂ∫ìÂêéÁ´ØÔºöÂÆ¢Êà∑Á´ØÁéØÂ¢É (PGLite) Âíå ÊúçÂä°Á´ØÁéØÂ¢É (PostgreSQL)

### ‚ö†Ô∏è ÂèåÁéØÂ¢ÉÈ™åËØÅË¶ÅÊ±Ç

**ÂØπ‰∫éÊâÄÊúâ Model ÊµãËØïÔºåÂøÖÈ°ªÂú®‰∏§‰∏™ÁéØÂ¢É‰∏ãÈÉΩÈ™åËØÅÈÄöËøá**Ôºö

#### ÂÆåÊï¥È™åËØÅÊµÅÁ®ã

```bash
# 1. ÂÖàÂú®ÂÆ¢Êà∑Á´ØÁéØÂ¢ÉÊµãËØïÔºàÂø´ÈÄüÈ™åËØÅÔºâ
npx vitest run --config vitest.config.ts src/database/models/__tests__/myModel.test.ts

# 2. ÂÜçÂú®ÊúçÂä°Á´ØÁéØÂ¢ÉÊµãËØïÔºàÂÖºÂÆπÊÄßÈ™åËØÅÔºâ
npx vitest run --config vitest.config.server.ts src/database/models/__tests__/myModel.test.ts
```

### ÂàõÂª∫Êñ∞ Model ÊµãËØïÁöÑÊúÄ‰Ω≥ÂÆûË∑µ üìã

#### 1. ÂèÇËÄÉÁé∞ÊúâÂÆûÁé∞ÂíåÊµãËØïÊ®°Êùø

ÂàõÂª∫Êñ∞ Model ÊµãËØïÂâçÔºå**ÂøÖÈ°ªÂÖàÂèÇËÄÉÁé∞ÊúâÁöÑÂÆûÁé∞Ê®°Âºè**Ôºö

- **Model ÂÆûÁé∞ÂèÇËÄÉ**: 
- **ÊµãËØïÊ®°ÊùøÂèÇËÄÉ**: 
- **Â§çÊùÇÁ§∫‰æãÂèÇËÄÉ**: 

#### 2. Áî®Êà∑ÊùÉÈôêÊ£ÄÊü• - ÂÆâÂÖ®Á¨¨‰∏Ä üîí

ËøôÊòØ**ÊúÄÂÖ≥ÈîÆÁöÑÂÆâÂÖ®Ë¶ÅÊ±Ç**„ÄÇÊâÄÊúâÊ∂âÂèäÁî®Êà∑Êï∞ÊçÆÁöÑÊìç‰ΩúÈÉΩÂøÖÈ°ªÂåÖÂê´Áî®Êà∑ÊùÉÈôêÊ£ÄÊü•Ôºö

**‚ùå ÈîôËØØÁ§∫‰æã - Â≠òÂú®ÂÆâÂÖ®ÊºèÊ¥û**:

```typescript
// Âç±Èô©ÔºöÁº∫Â∞ëÁî®Êà∑ÊùÉÈôêÊ£ÄÊü•Ôºå‰ªª‰ΩïÁî®Êà∑ÈÉΩËÉΩÊìç‰Ωú‰ªª‰ΩïÊï∞ÊçÆ
update = async (id: string, data: Partial<MyModel>) => {
    return this.db
        .update(myTable)
        .set(data)
        .where(eq(myTable.id, id)) // ‚ùå Âè™Ê£ÄÊü• IDÔºåÊ≤°ÊúâÊ£ÄÊü• userId
        .returning();
};
```

**‚úÖ Ê≠£Á°ÆÁ§∫‰æã - ÂÆâÂÖ®ÁöÑÂÆûÁé∞**:

```typescript
// ÂÆâÂÖ®ÔºöÂøÖÈ°ªÂêåÊó∂ÂåπÈÖç ID Âíå userId
update = async (id: string, data: Partial<MyModel>) => {
    return this.db
        .update(myTable)
        .set(data)
        .where(
            and(
                eq(myTable.id, id),
                eq(myTable.userId, this.userId) // ‚úÖ Áî®Êà∑ÊùÉÈôêÊ£ÄÊü•
            )
        )
        .returning();
};
```

**ÂøÖÈ°ªËøõË°åÁî®Êà∑ÊùÉÈôêÊ£ÄÊü•ÁöÑÊñπÊ≥ï**Ôºö

- `update()` - Êõ¥Êñ∞Êìç‰Ωú
- `delete()` - Âà†Èô§Êìç‰Ωú
- `findById()` - Êü•ÊâæÁâπÂÆöËÆ∞ÂΩï
- ‰ªª‰ΩïÊ∂âÂèäÁâπÂÆöËÆ∞ÂΩïÁöÑÊü•ËØ¢Êàñ‰øÆÊîπÊìç‰Ωú

#### 3. ÊµãËØïÊñá‰ª∂ÁªìÊûÑÂíåÂøÖÊµãÂú∫ÊôØ

**Âü∫Êú¨ÊµãËØïÁªìÊûÑ**:

```typescript
// @vitest-environment node
describe("MyModel", () => {
    describe("create", () => {
        it("should create a new record");
        it("should handle edge cases");
    });

    describe("queryAll", () => {
        it("should return records for current user only");
        it("should handle empty results");
    });

    describe("update", () => {
        it("should update own records");
        it("should NOT update other users records"); // üîí ÂÆâÂÖ®ÊµãËØï
    });

    describe("delete", () => {
        it("should delete own records");
        it("should NOT delete other users records"); // üîí ÂÆâÂÖ®ÊµãËØï
    });

    describe("user isolation", () => {
        it("should enforce user data isolation"); // üîí Ê†∏ÂøÉÂÆâÂÖ®ÊµãËØï
    });
});
```

**ÂøÖÈ°ªÊµãËØïÁöÑÂÆâÂÖ®Âú∫ÊôØ** üîí:

```typescript
it("should not update records of other users", async () => {
    // ÂàõÂª∫ÂÖ∂‰ªñÁî®Êà∑ÁöÑËÆ∞ÂΩï
    const [otherUserRecord] = await serverDB
        .insert(myTable)
        .values({ userId: "other-user", data: "original" })
        .returning();

    // Â∞ùËØïÊõ¥Êñ∞ÂÖ∂‰ªñÁî®Êà∑ÁöÑËÆ∞ÂΩï
    const result = await myModel.update(otherUserRecord.id, { data: "hacked" });

    // Â∫îËØ•ËøîÂõû undefined ÊàñÁ©∫Êï∞ÁªÑÔºàÂõ†‰∏∫ÊùÉÈôêÊ£ÄÊü•Â§±Ë¥•Ôºâ
    expect(result).toBeUndefined();

    // È™åËØÅÂéüÂßãÊï∞ÊçÆÊú™Ë¢´‰øÆÊîπ
    const unchanged = await serverDB.query.myTable.findFirst({
        where: eq(myTable.id, otherUserRecord.id),
    });
    expect(unchanged?.data).toBe("original"); // Êï∞ÊçÆÂ∫îËØ•‰øùÊåÅ‰∏çÂèò
});
```

#### 4. Mock Â§ñÈÉ®‰æùËµñÊúçÂä°

Â¶ÇÊûú Model ‰æùËµñÂ§ñÈÉ®ÊúçÂä°ÔºàÂ¶Ç FileServiceÔºâÔºåÈúÄË¶ÅÊ≠£Á°Æ MockÔºö

**ËÆæÁΩÆ Mock**:

```typescript
// Âú®Êñá‰ª∂È°∂ÈÉ®ËÆæÁΩÆ Mock
const mockGetFullFileUrl = vi.fn();
vi.mock("@/server/services/file", () => ({
    FileService: vi.fn().mockImplementation(() => ({
        getFullFileUrl: mockGetFullFileUrl,
    })),
}));

// Âú® beforeEach ‰∏≠ÈáçÁΩÆÂíåÈÖçÁΩÆ Mock
beforeEach(async () => {
    vi.clearAllMocks();
    mockGetFullFileUrl.mockImplementation(
        (url: string) => `https://example.com/${url}`
    );
});
```

**È™åËØÅ Mock Ë∞ÉÁî®**:

```typescript
it("should process URLs through FileService", async () => {
    // ... ÊµãËØïÈÄªËæë

    // È™åËØÅ Mock Ë¢´Ê≠£Á°ÆË∞ÉÁî®
    expect(mockGetFullFileUrl).toHaveBeenCalledWith("expected-url");
    expect(mockGetFullFileUrl).toHaveBeenCalledTimes(1);
});
```

#### 5. Êï∞ÊçÆÂ∫ìÁä∂ÊÄÅÁÆ°ÁêÜ

**Ê≠£Á°ÆÁöÑÊï∞ÊçÆÊ∏ÖÁêÜÊ®°Âºè**:

```typescript
const userId = "test-user";
const otherUserId = "other-user";

beforeEach(async () => {
    // Ê∏ÖÁêÜÁî®Êà∑Ë°®ÔºàÁ∫ßËÅîÂà†Èô§Áõ∏ÂÖ≥Êï∞ÊçÆÔºâ
    await serverDB.delete(users);

    // ÂàõÂª∫ÊµãËØïÁî®Êà∑
    await serverDB.insert(users).values([{ id: userId }, { id: otherUserId }]);
});

afterEach(async () => {
    // Ê∏ÖÁêÜÊµãËØïÊï∞ÊçÆ
    await serverDB.delete(users);
});
```

#### 6. ÊµãËØïÊï∞ÊçÆÁ±ªÂûãÂíåÂ§ñÈîÆÁ∫¶ÊùüÂ§ÑÁêÜ ‚ö†Ô∏è

**ÂøÖÈ°ª‰ΩøÁî® Schema ÂØºÂá∫ÁöÑÁ±ªÂûã**:

```typescript
// ‚úÖ Ê≠£Á°ÆÔºö‰ΩøÁî® schema ÂØºÂá∫ÁöÑÁ±ªÂûã
import { NewGenerationBatch, NewGeneration } from '../../schemas';

const testBatch: NewGenerationBatch = {
    userId,
    generationTopicId: 'test-topic-id',
    provider: 'test-provider',
    model: 'test-model',
    prompt: 'Test prompt for image generation',
    width: 1024,
    height: 1024,
    config: { /* ... */ },
};

const testGeneration: NewGeneration = {
    id: 'test-gen-id',
    generationBatchId: 'test-batch-id',
    asyncTaskId: null, // Â§ÑÁêÜÂ§ñÈîÆÁ∫¶Êùü
    fileId: null,      // Â§ÑÁêÜÂ§ñÈîÆÁ∫¶Êùü
    seed: 12345,
    userId,
};
```

```typescript
// ‚ùå ÈîôËØØÔºöÊ≤°ÊúâÁ±ªÂûãÂ£∞ÊòéÊàñ‰ΩøÁî®ÈîôËØØÁ±ªÂûã
const testBatch = {  // Áº∫Â∞ëÁ±ªÂûãÂ£∞Êòé
    generationTopicId: 'test-topic-id',
    // ...
};

const testGeneration = {  // Áº∫Â∞ëÁ±ªÂûãÂ£∞Êòé
    asyncTaskId: 'invalid-uuid',  // Â§ñÈîÆÁ∫¶ÊùüÈîôËØØ
    fileId: 'non-existent-file',  // Â§ñÈîÆÁ∫¶ÊùüÈîôËØØ
    // ...
};
```

**Â§ñÈîÆÁ∫¶ÊùüÂ§ÑÁêÜÁ≠ñÁï•**:

1. **‰ΩøÁî® null ÂÄº**: ÂØπ‰∫éÂèØÈÄâÁöÑÂ§ñÈîÆÂ≠óÊÆµÔºå‰ΩøÁî® null ÈÅøÂÖçÁ∫¶ÊùüÈîôËØØ
2. **ÂàõÂª∫ÂÖ≥ËÅîËÆ∞ÂΩï**: Â¶ÇÊûúÈúÄË¶ÅÊµãËØïÂÖ≥ËÅîÂÖ≥Á≥ªÔºåÂÖàÂàõÂª∫Ë¢´ÂºïÁî®ÁöÑËÆ∞ÂΩï
3. **ÁêÜËß£Á∫¶ÊùüÂÖ≥Á≥ª**: ‰∫ÜËß£Âì™‰∫õÂ≠óÊÆµÊúâÂ§ñÈîÆÁ∫¶ÊùüÔºåÈÅøÂÖçÂºïÁî®‰∏çÂ≠òÂú®ÁöÑËÆ∞ÂΩï

```typescript
// Â§ñÈîÆÁ∫¶ÊùüÂ§ÑÁêÜÁ§∫‰æã
beforeEach(async () => {
    // Ê∏ÖÁêÜÊï∞ÊçÆÂ∫ì
    await serverDB.delete(users);
    
    // ÂàõÂª∫ÊµãËØïÁî®Êà∑
    await serverDB.insert(users).values([{ id: userId }]);
    
    // Â¶ÇÊûúÈúÄË¶ÅÊµãËØïÊñá‰ª∂ÂÖ≥ËÅîÔºåÂàõÂª∫Êñá‰ª∂ËÆ∞ÂΩï
    if (needsFileAssociation) {
        await serverDB.insert(files).values({
            id: 'test-file-id',
            userId,
            name: 'test.jpg',
            url: 'test-url',
            size: 1024,
            fileType: 'image/jpeg',
        });
    }
});
```

**ÊéíÂ∫èÊµãËØïÁöÑÂèØÈ¢ÑÊµãÊÄß**:

```typescript
// ‚úÖ Ê≠£Á°ÆÔºö‰ΩøÁî®ÊòéÁ°ÆÁöÑÊó∂Èó¥Êà≥Á°Æ‰øùÊéíÂ∫èÁªìÊûúÂèØÈ¢ÑÊµã
it('should find batches by topic id in correct order', async () => {
    const oldDate = new Date('2024-01-01T10:00:00Z');
    const newDate = new Date('2024-01-02T10:00:00Z');
    
    const batch1 = { ...testBatch, prompt: 'First batch', userId, createdAt: oldDate };
    const batch2 = { ...testBatch, prompt: 'Second batch', userId, createdAt: newDate };

    await serverDB.insert(generationBatches).values([batch1, batch2]);

    const results = await generationBatchModel.findByTopicId(testTopic.id);

    expect(results[0].prompt).toBe('Second batch'); // ÊúÄÊñ∞‰ºòÂÖà (desc order)
    expect(results[1].prompt).toBe('First batch');
});
```

```typescript
// ‚ùå ÈîôËØØÔºö‰æùËµñÊï∞ÊçÆÂ∫ìÁöÑÈªòËÆ§Êó∂Èó¥Êà≥ÔºåÁªìÊûú‰∏çÂèØÈ¢ÑÊµã
it('should find batches by topic id', async () => {
    const batch1 = { ...testBatch, prompt: 'First batch', userId };
    const batch2 = { ...testBatch, prompt: 'Second batch', userId };

    await serverDB.insert(generationBatches).values([batch1, batch2]);
    
    // ÊèíÂÖ•È°∫Â∫èÂíåÊï∞ÊçÆÂ∫ìÊó∂Èó¥Êà≥ÂèØËÉΩ‰∏ç‰∏ÄËá¥ÔºåÂØºËá¥ÊµãËØï‰∏çÁ®≥ÂÆö
    const results = await generationBatchModel.findByTopicId(testTopic.id);
    expect(results[0].prompt).toBe('Second batch'); // ÂèØËÉΩÂ§±Ë¥•
});
```



### Â∏∏ËßÅÈóÆÈ¢òÂíåËß£ÂÜ≥ÊñπÊ°à üí°

#### ÈóÆÈ¢ò 1ÔºöÊùÉÈôêÊ£ÄÊü•Áº∫Â§±ÂØºËá¥ÂÆâÂÖ®ÊºèÊ¥û

**Áé∞Ë±°**: ÊµãËØïÂ§±Ë¥•ÔºåÁî®Êà∑ËÉΩ‰øÆÊîπÂÖ∂‰ªñÁî®Êà∑ÁöÑÊï∞ÊçÆ
**Ëß£ÂÜ≥**: Âú® Model ÁöÑ `update` Âíå `delete` ÊñπÊ≥ï‰∏≠Ê∑ªÂä† `and(eq(table.id, id), eq(table.userId, this.userId))`

#### ÈóÆÈ¢ò 2ÔºöMock Êú™ÁîüÊïàÊàñÈ™åËØÅÂ§±Ë¥•

**Áé∞Ë±°**: `undefined is not a spy` ÈîôËØØ
**Ëß£ÂÜ≥**: Ê£ÄÊü• Mock ËÆæÁΩÆ‰ΩçÁΩÆÂíåÊñπÂºèÔºåÁ°Æ‰øùÂú®ÊµãËØïÊñá‰ª∂È°∂ÈÉ®ËÆæÁΩÆÔºåÂú® `beforeEach` ‰∏≠ÈáçÁΩÆ

#### ÈóÆÈ¢ò 3ÔºöÊµãËØïÊï∞ÊçÆÊ±°Êüì

**Áé∞Ë±°**: ÊµãËØïÈó¥Áõ∏‰∫íÂΩ±ÂìçÔºåÁªìÊûú‰∏çÁ®≥ÂÆö
**Ëß£ÂÜ≥**: Âú® `beforeEach` Âíå `afterEach` ‰∏≠Ê≠£Á°ÆÊ∏ÖÁêÜÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅ

#### ÈóÆÈ¢ò 4ÔºöÂ§ñÈÉ®‰æùËµñÂØºËá¥ÊµãËØïÂ§±Ë¥•

**Áé∞Ë±°**: Âõ†‰∏∫ÁúüÂÆûÁöÑÂ§ñÈÉ®ÊúçÂä°Ë∞ÉÁî®ÂØºËá¥ÊµãËØï‰∏çÁ®≥ÂÆö
**Ëß£ÂÜ≥**: Mock ÊâÄÊúâÂ§ñÈÉ®‰æùËµñÔºå‰ΩøÊµãËØïÊõ¥ÂèØÊéßÂíåÂø´ÈÄü

#### ÈóÆÈ¢ò 5ÔºöÂ§ñÈîÆÁ∫¶ÊùüËøùÂèçÂØºËá¥ÊµãËØïÂ§±Ë¥•

**Áé∞Ë±°**: `insert or update on table "xxx" violates foreign key constraint`
**Ëß£ÂÜ≥**: 
- Â∞ÜÂèØÈÄâÂ§ñÈîÆÂ≠óÊÆµËÆæ‰∏∫ `null` ËÄå‰∏çÊòØÊó†ÊïàÁöÑÂ≠óÁ¨¶‰∏≤ÂÄº
- ÊàñËÄÖÂÖàÂàõÂª∫Ë¢´ÂºïÁî®ÁöÑËÆ∞ÂΩïÔºåÂÜçÂàõÂª∫ÂΩìÂâçËÆ∞ÂΩï

```typescript
// ‚ùå ÈîôËØØÔºöÊó†ÊïàÁöÑÂ§ñÈîÆÂÄº
const testData = {
    asyncTaskId: 'invalid-uuid',  // Ë°®‰∏≠‰∏çÂ≠òÂú®Ê≠§ËÆ∞ÂΩï
    fileId: 'non-existent-file',  // Ë°®‰∏≠‰∏çÂ≠òÂú®Ê≠§ËÆ∞ÂΩï
};

// ‚úÖ Ê≠£Á°ÆÔºö‰ΩøÁî® null ÂÄº
const testData = {
    asyncTaskId: null,  // ÈÅøÂÖçÂ§ñÈîÆÁ∫¶Êùü
    fileId: null,       // ÈÅøÂÖçÂ§ñÈîÆÁ∫¶Êùü
};

// ‚úÖ ÊàñËÄÖÔºöÂÖàÂàõÂª∫Ë¢´ÂºïÁî®ÁöÑËÆ∞ÂΩï
beforeEach(async () => {
    const [asyncTask] = await serverDB.insert(asyncTasks).values({
        id: 'valid-task-id',
        status: 'pending',
        type: 'generation',
    }).returning();
    
    const testData = {
        asyncTaskId: asyncTask.id,  // ‰ΩøÁî®ÊúâÊïàÁöÑÂ§ñÈîÆÂÄº
    };
});
```

#### ÈóÆÈ¢ò 6ÔºöÊéíÂ∫èÊµãËØïÁªìÊûú‰∏ç‰∏ÄËá¥

**Áé∞Ë±°**: Áõ∏ÂêåÁöÑÊµãËØïÊúâÊó∂ÈÄöËøáÔºåÊúâÊó∂Â§±Ë¥•ÔºåÁâπÂà´ÊòØÊ∂âÂèäÊéíÂ∫èÁöÑÊµãËØï
**Ëß£ÂÜ≥**: ‰ΩøÁî®ÊòéÁ°ÆÁöÑÊó∂Èó¥Êà≥Ôºå‰∏çË¶Å‰æùËµñÊï∞ÊçÆÂ∫ìÁöÑÈªòËÆ§Êó∂Èó¥Êà≥

```typescript
// ‚ùå ÈîôËØØÔºö‰æùËµñÊèíÂÖ•È°∫Â∫èÂíåÈªòËÆ§Êó∂Èó¥Êà≥
await serverDB.insert(table).values([data1, data2]);  // Êó∂Èó¥Êà≥‰∏çÂèØÈ¢ÑÊµã

// ‚úÖ Ê≠£Á°ÆÔºöÊòéÁ°ÆÊåáÂÆöÊó∂Èó¥Êà≥
const oldDate = new Date('2024-01-01T10:00:00Z');
const newDate = new Date('2024-01-02T10:00:00Z');
await serverDB.insert(table).values([
    { ...data1, createdAt: oldDate },
    { ...data2, createdAt: newDate },
]);
```

#### ÈóÆÈ¢ò 7ÔºöMock È™åËØÅÂ§±Ë¥•ÊàñË∞ÉÁî®Ê¨°Êï∞‰∏çÂåπÈÖç

**Áé∞Ë±°**: `expect(mockFunction).toHaveBeenCalledWith(...)` Â§±Ë¥•
**Ëß£ÂÜ≥**: 
- Ê£ÄÊü• Mock ÂáΩÊï∞ÁöÑÂÆûÈôÖË∞ÉÁî®ÂèÇÊï∞ÂíåÊúüÊúõÂèÇÊï∞ÊòØÂê¶ÂÆåÂÖ®ÂåπÈÖç
- Á°ÆËÆ§ Mock Âú®Ê≠£Á°ÆÁöÑÊó∂Êú∫Ë¢´ÈáçÁΩÆÂíåÈÖçÁΩÆ
- ‰ΩøÁî® `toHaveBeenCalledTimes()` È™åËØÅË∞ÉÁî®Ê¨°Êï∞

```typescript
// Âú® beforeEach ‰∏≠Ê≠£Á°ÆÈÖçÁΩÆ Mock
beforeEach(() => {
    vi.clearAllMocks();  // ÈáçÁΩÆÊâÄÊúâ Mock
    
    mockGetFullFileUrl.mockImplementation((url: string) => `https://example.com/${url}`);
    mockTransformGeneration.mockResolvedValue({
        id: 'test-id',
        // ... ÂÖ∂‰ªñÂ≠óÊÆµ
    });
});

// ÊµãËØï‰∏≠È™åËØÅ Mock Ë∞ÉÁî®
it('should call FileService with correct parameters', async () => {
    await model.someMethod();
    
    // È™åËØÅË∞ÉÁî®ÂèÇÊï∞
    expect(mockGetFullFileUrl).toHaveBeenCalledWith('expected-url');
    // È™åËØÅË∞ÉÁî®Ê¨°Êï∞
    expect(mockGetFullFileUrl).toHaveBeenCalledTimes(1);
});
```

### Model ÊµãËØïÊ£ÄÊü•Ê∏ÖÂçï ‚úÖ

ÂàõÂª∫ Model ÊµãËØïÊó∂ÔºåËØ∑Á°Æ‰øù‰ª•‰∏ãÂêÑÈ°πÈÉΩÂ∑≤ÂÆåÊàêÔºö

#### üîß Âü∫Á°ÄÈÖçÁΩÆ
- [ ] **ÂèåÁéØÂ¢ÉÈ™åËØÅ** - Âú®ÂÆ¢Êà∑Á´ØÁéØÂ¢É (vitest.config.ts) ÂíåÊúçÂä°Á´ØÁéØÂ¢É (vitest.config.server.ts) ‰∏ãÈÉΩÊµãËØïÈÄöËøá
- [ ] ÂèÇËÄÉ‰∫Ü `_template.ts` ÂíåÁé∞Êúâ Model ÁöÑÂÆûÁé∞Ê®°Âºè
- [ ] **‰ΩøÁî®Ê≠£Á°ÆÁöÑ Schema Á±ªÂûã** - ÊµãËØïÊï∞ÊçÆ‰ΩøÁî® `NewXxx` Á±ªÂûãÂ£∞ÊòéÔºåÂ¶Ç `NewGenerationBatch`„ÄÅ`NewGeneration`

#### üîí ÂÆâÂÖ®ÊµãËØï
- [ ] **ÊâÄÊúâÊ∂âÂèäÁî®Êà∑Êï∞ÊçÆÁöÑÊìç‰ΩúÈÉΩÂåÖÂê´Áî®Êà∑ÊùÉÈôêÊ£ÄÊü•**
- [ ] ÂåÖÂê´‰∫ÜÁî®Êà∑ÊùÉÈôêÈöîÁ¶ªÁöÑÂÆâÂÖ®ÊµãËØï
- [ ] ÊµãËØï‰∫ÜÁî®Êà∑Êó†Ê≥ïËÆøÈóÆÂÖ∂‰ªñÁî®Êà∑Êï∞ÊçÆÁöÑÂú∫ÊôØ

#### üóÉÔ∏è Êï∞ÊçÆÂ§ÑÁêÜ
- [ ] **Ê≠£Á°ÆÂ§ÑÁêÜÂ§ñÈîÆÁ∫¶Êùü** - ‰ΩøÁî® `null` ÂÄºÊàñÂÖàÂàõÂª∫Ë¢´ÂºïÁî®ËÆ∞ÂΩï
- [ ] **ÊéíÂ∫èÊµãËØï‰ΩøÁî®ÊòéÁ°ÆÊó∂Èó¥Êà≥** - ‰∏ç‰æùËµñÊï∞ÊçÆÂ∫ìÈªòËÆ§Êó∂Èó¥ÔºåÁ°Æ‰øùÁªìÊûúÂèØÈ¢ÑÊµã
- [ ] Âú® `beforeEach` Âíå `afterEach` ‰∏≠Ê≠£Á°ÆÁÆ°ÁêÜÊï∞ÊçÆÂ∫ìÁä∂ÊÄÅ
- [ ] ÊâÄÊúâÊµãËØïÈÉΩËÉΩÁã¨Á´ãËøêË°å‰∏î‰∫í‰∏çÂπ≤Êâ∞

#### üé≠ Mock ÂíåÂ§ñÈÉ®‰æùËµñ
- [ ] Ê≠£Á°Æ Mock ‰∫ÜÂ§ñÈÉ®‰æùËµñÊúçÂä° (Â¶Ç FileService„ÄÅGenerationModel)
- [ ] Âú® `beforeEach` ‰∏≠ÈáçÁΩÆÂíåÈÖçÁΩÆ Mock
- [ ] È™åËØÅ‰∫Ü Mock ÊúçÂä°ÁöÑË∞ÉÁî®ÂèÇÊï∞ÂíåÊ¨°Êï∞
- [ ] ÊµãËØï‰∫ÜÂ§ñÈÉ®ÊúçÂä°ÈîôËØØÂú∫ÊôØÁöÑÂ§ÑÁêÜ

#### üìã ÊµãËØïË¶ÜÁõñ
- [ ] ÊµãËØïË¶ÜÁõñ‰∫ÜÊâÄÊúâ‰∏ªË¶ÅÊñπÊ≥ï (create, query, update, delete)
- [ ] ÊµãËØï‰∫ÜËæπÁïåÊù°‰ª∂ÂíåÈîôËØØÂú∫ÊôØ
- [ ] ÂåÖÂê´‰∫ÜÁ©∫ÁªìÊûúÂ§ÑÁêÜÁöÑÊµãËØï
- [ ] **Á°ÆËÆ§‰∏§‰∏™ÁéØÂ¢É‰∏ãÁöÑÊµãËØïÁªìÊûú‰∏ÄËá¥**

#### üö® Â∏∏ËßÅÈóÆÈ¢òÊ£ÄÊü•
- [ ] Ê≤°ÊúâÂ§ñÈîÆÁ∫¶ÊùüËøùÂèçÈîôËØØ
- [ ] ÊéíÂ∫èÊµãËØïÁªìÊûúÁ®≥ÂÆöÂèØÈ¢ÑÊµã
- [ ] Mock È™åËØÅÊó†Â§±Ë¥•
- [ ] Êó†ÊµãËØïÊï∞ÊçÆÊ±°ÊüìÈóÆÈ¢ò

### ÂÆâÂÖ®Ë≠¶Âëä ‚ö†Ô∏è

**Êï∞ÊçÆÂ∫ì Model Â±ÇÊòØÂÆâÂÖ®ÁöÑÁ¨¨‰∏ÄÈÅìÈò≤Á∫ø**„ÄÇÂ¶ÇÊûú Model Â±ÇÁº∫Â∞ëÁî®Êà∑ÊùÉÈôêÊ£ÄÊü•Ôºö

1. **‰ªª‰ΩïÁî®Êà∑ÈÉΩËÉΩËÆøÈóÆÂíå‰øÆÊîπÂÖ∂‰ªñÁî®Êà∑ÁöÑÊï∞ÊçÆ**
2. **Âç≥‰Ωø‰∏äÂ±ÇÊúâÊùÉÈôêÊ£ÄÊü•Ôºå‰πüÂèØËÉΩË¢´ÁªïËøá**
3. **ÂèØËÉΩÂØºËá¥‰∏•ÈáçÁöÑÊï∞ÊçÆÊ≥ÑÈú≤ÂíåÂÆâÂÖ®‰∫ãÊïÖ**

Âõ†Ê≠§Ôºå**ÊØè‰∏™Ê∂âÂèäÁî®Êà∑Êï∞ÊçÆÁöÑ Model ÊñπÊ≥ïÈÉΩÂøÖÈ°ªÂåÖÂê´Áî®Êà∑ÊùÉÈôêÊ£ÄÊü•Ôºå‰∏îÂøÖÈ°ªÊúâÂØπÂ∫îÁöÑÂÆâÂÖ®ÊµãËØïÊù•È™åËØÅËøô‰∫õÊ£ÄÊü•ÁöÑÊúâÊïàÊÄß**„ÄÇ

## üéØ ÊÄªÁªì

‰øÆÂ§çÊµãËØïÊó∂ÔºåËÆ∞‰Ωè‰ª•‰∏ãÂÖ≥ÈîÆÁÇπÔºö

- **‰ΩøÁî®Ê≠£Á°ÆÁöÑÂëΩ‰ª§**: `npx vitest run --config [config-file]`
- **ÁêÜËß£ÊµãËØïÊÑèÂõæ**: ÂÖàËØªÊáÇÊµãËØïÂÜç‰øÆÂ§ç
- **Êü•ÁúãÊúÄËøë‰øÆÊîπ**: Ê£ÄÊü•Áõ∏ÂÖ≥Êñá‰ª∂ÁöÑ git ‰øÆÊîπËÆ∞ÂΩïÔºåÂà§Êñ≠ÈóÆÈ¢òÊ†πÊ∫ê
- **ÈÄâÊã©Ê≠£Á°ÆÁéØÂ¢É**: ÂÆ¢Êà∑Á´ØÊµãËØïÁî® `vitest.config.ts`ÔºåÊúçÂä°Á´ØÁî® `vitest.config.server.ts`
- **‰∏ìÊ≥®Âçï‰∏ÄÈóÆÈ¢ò**: Âè™‰øÆÂ§çÂΩìÂâçÁöÑÊµãËØïÂ§±Ë¥•
- **È™åËØÅ‰øÆÂ§çÁªìÊûú**: Á°Æ‰øù‰øÆÂ§çÂêéÊµãËØïÈÄöËøá‰∏îÊó†ÂâØ‰ΩúÁî®
- **Êèê‰æõ‰øÆÂ§çÊÄªÁªì**: ËØ¥ÊòéÈîôËØØÂéüÂõ†Âíå‰øÆÂ§çÊñπÊ≥ï
- **Model ÊµãËØïÂÆâÂÖ®Á¨¨‰∏Ä**: ÂøÖÈ°ªÂåÖÂê´Áî®Êà∑ÊùÉÈôêÊ£ÄÊü•ÂíåÂØπÂ∫îÁöÑÂÆâÂÖ®ÊµãËØï
- **Model ÂèåÁéØÂ¢ÉÈ™åËØÅ**: ÂøÖÈ°ªÂú® PGLite Âíå PostgreSQL ‰∏§‰∏™ÁéØÂ¢É‰∏ãÈÉΩÈ™åËØÅÈÄöËøá
