---
description: 
globs: src/store/**
alwaysApply: false
---
# Arquitetura de Organização de Slice Zustand Store do Agents Chat

Este documento descreve a forma modular de organização dos Slices do Zustand Store no projeto Agents Chat, mostrando como gerenciar estados complexos de aplicação através de arquitetura fragmentada.

## Estrutura do Store de Nível Superior

O `chat` store do Agents Chat (`src/store/chat/`) adota uma estrutura de slice modular para organizar estado e lógica.

### Arquivos de Agregação Principais

- `src/store/chat/initialState.ts`: Agrega todos os estados iniciais dos slices
- `src/store/chat/store.ts`: Define o `ChatStore` de nível superior, combinando todas as actions dos slices
- `src/store/chat/selectors.ts`: Exporta unificadamente todos os selectors dos slices
- `src/store/chat/helpers.ts`: Fornece funções auxiliares relacionadas ao chat

### Padrão de Agregação do Store

```typescript
// src/store/chat/initialState.ts
import { ChatTopicState, initialTopicState } from './slices/topic/initialState';
import { ChatMessageState, initialMessageState } from './slices/message/initialState';
import { ChatAIChatState, initialAiChatState } from './slices/aiChat/initialState';

export type ChatStoreState = ChatTopicState &
  ChatMessageState &
  ChatAIChatState &
  // ...outros slice states

export const initialState: ChatStoreState = {
  ...initialMessageState,
  ...initialTopicState,
  ...initialAiChatState,
  // ...outros initial slice states
};
```

```typescript
// src/store/chat/store.ts
import { ChatMessageAction, chatMessage } from './slices/message/action';
import { ChatTopicAction, chatTopic } from './slices/topic/action';
import { ChatAIChatAction, chatAiChat } from './slices/aiChat/actions';

export interface ChatStoreAction
  extends ChatMessageAction,
    ChatTopicAction,
    ChatAIChatAction,
    // ...outras slice actions

const createStore: StateCreator<ChatStore, [['zustand/devtools', never]]> = (...params) => ({
  ...initialState,
  ...chatMessage(...params),
  ...chatTopic(...params),
  ...chatAiChat(...params),
  // ...outros slice action creators
});

export const useChatStore = createWithEqualityFn<ChatStore>()(
  subscribeWithSelector(devtools(createStore)),
  shallow,
);
```

## Estrutura Padrão de um Slice Individual

Cada slice está localizado no diretório `src/store/chat/slices/[sliceName]/`:

```
src/store/chat/slices/
└── [sliceName]/                 # Ex: message, topic, aiChat, builtinTool
    ├── action.ts                # Define actions (ou um diretório actions/)
    ├── initialState.ts          # Define estrutura do state e valores iniciais
    ├── reducer.ts               # (Opcional) Se usar padrão reducer
    ├── selectors.ts             # Define selectors
    └── index.ts                 # (Opcional) Re-exporta conteúdo do módulo
```

### Descrição das Responsabilidades dos Arquivos

1. `initialState.ts`:
   - Define interface TypeScript do estado do slice
   - Fornece valores padrão do estado inicial

```typescript
// Estrutura típica do initialState.ts
export interface ChatTopicState {
  activeTopicId?: string;
  topicMaps: Record<string, ChatTopic[]>; // Estrutura de dados central
  topicsInit: boolean;
  topicLoadingIds: string[];
  // ...outros campos de estado
}

export const initialTopicState: ChatTopicState = {
  activeTopicId: undefined,
  topicMaps: {},
  topicsInit: false,
  topicLoadingIds: [],
  // ...outros valores iniciais
};
```

2. `reducer.ts` (para estados complexos):
   - Define reducers de função pura, gerencia transições de estado síncronas
   - Usa `immer` para garantir atualizações imutáveis

```typescript
// Estrutura típica do reducer.ts
import { produce } from 'immer';

interface AddChatTopicAction {
  type: 'addTopic';
  value: CreateTopicParams & { id?: string };
}

interface UpdateChatTopicAction {
  id: string;
  type: 'updateTopic';
  value: Partial<ChatTopic>;
}

export type ChatTopicDispatch = AddChatTopicAction | UpdateChatTopicAction;

export const topicReducer = (state: ChatTopic[] = [], payload: ChatTopicDispatch): ChatTopic[] => {
  switch (payload.type) {
    case 'addTopic': {
      return produce(state, (draftState) => {
        draftState.unshift({
          ...payload.value,
          id: payload.value.id ?? Date.now().toString(),
          createdAt: Date.now(),
        });
      });
    }
    case 'updateTopic': {
      return produce(state, (draftState) => {
        const index = draftState.findIndex((topic) => topic.id === payload.id);
        if (index !== -1) {
          draftState[index] = { ...draftState[index], ...payload.value };
        }
      });
    }
    default:
      return state;
  }
};
```

3. `selectors.ts`:
   - Fornece funções de consulta e cálculo de estado
   - Interface de assinatura de estado para uso por componentes de UI
   - Importante: Usa o padrão `export const xxxSelectors` para agregar todos os selectors

```typescript
// Estrutura típica do selectors.ts
import { ChatStoreState } from '../../initialState';

const currentTopics = (s: ChatStoreState): ChatTopic[] | undefined => 
  s.topicMaps[s.activeId];

const currentActiveTopic = (s: ChatStoreState): ChatTopic | undefined => {
  return currentTopics(s)?.find((topic) => topic.id === s.activeTopicId);
};

const getTopicById = (id: string) => (s: ChatStoreState): ChatTopic | undefined =>
  currentTopics(s)?.find((topic) => topic.id === id);

// Padrão central: uso de xxxSelectors para exportação agregada
export const topicSelectors = {
  currentActiveTopic,
  currentTopics,
  getTopicById,
  // ...outros selectors
};
```

## Padrões de Organização Especiais para Slices

### Estrutura de Subdiretórios para Actions Complexas (aiChat Slice)

Quando as actions de um slice são muito complexas, podem ser divididas em subdiretórios:

```
src/store/chat/slices/aiChat/
├── actions/
│   ├── generateAIChat.ts       # Geração de conversa AI
│   ├── rag.ts                  # RAG - Retrieval Augmented Generation
│   ├── memory.ts               # Gerenciamento de memória da conversa
│   └── index.ts                # Agrega todas as actions
├── initialState.ts
├── selectors.ts
└── index.ts
```

Referencia: `src/store/chat/slices/aiChat/actions/`

### Slice de Ferramentas (builtinTool)

Gerencia estados de múltiplas ferramentas integradas:

```
src/store/chat/slices/builtinTool/
├── actions/
│   ├── dalle.ts                # Geração de imagem DALL-E
│   ├── search.ts               # Funcionalidade de busca
│   ├── localFile.ts            # Operações de arquivo local
│   └── index.ts
├── initialState.ts
├── selectors.ts
└── index.ts
```

Referencia: `src/store/chat/slices/builtinTool/`

## Padrões de Design de Estado

### 1. Estrutura Map para Dados Relacionais
```typescript
// Usa sessionId como chave, gerencia dados de múltiplas sessões
topicMaps: Record<string, ChatTopic[]>
messagesMap: Record<string, ChatMessage[]>
```

### 2. Arrays para Gerenciamento de Estados de Carregamento
```typescript
// Gerencia estados de carregamento de múltiplas operações concorrentes
messageLoadingIds: string[]
topicLoadingIds: string[]
chatLoadingIds: string[]
```

### 3. Campos Opcionais para Itens Ativos Atuais
```typescript
// IDs de entidades atualmente ativas
activeId: string
activeTopicId?: string
activeThreadId?: string
```

## Integração de Slices ao Store de Nível Superior

### 1. Agregação de Estado
```typescript
// Em initialState.ts
export type ChatStoreState = ChatTopicState &
  ChatMessageState &
  ChatAIChatState &
  // ...outros slice states
```

### 2. Agregação de Interface de Actions
```typescript
// Em store.ts
export interface ChatStoreAction
  extends ChatMessageAction,
    ChatTopicAction,
    ChatAIChatAction,
    // ...outras slice actions
```

### 3. Exportação Unificada de Selectors
```typescript
// Em selectors.ts - agregação unificada de selectors
export { chatSelectors } from './slices/message/selectors';
export { topicSelectors } from './slices/topic/selectors';
export { aiChatSelectors } from './slices/aiChat/selectors';

// Cada selectors.ts do slice usa o padrão xxxSelectors:
// export const chatSelectors = { ... }
// export const topicSelectors = { ... }
// export const aiChatSelectors = { ... }
```

## Melhores Práticas

1. Princípios de Divisão de Slices:
   - Dividir por domínio funcional (message, topic, aiChat etc.)
   - Cada slice gerencia estado e operações relacionadas
   - Evitar forte acoplamento entre slices

2. Convenções de Nomenclatura de Arquivos:
   - Usar camelCase para nomear diretórios de slices
   - Nomes de arquivo seguem padrão consistente (action.ts, selectors.ts etc.)
   - Para actions complexas, usar subdiretório actions/

3. Design de Estrutura de Estado:
   - Estrutura de estado achatada, evitar aninhamento profundo
   - Usar estruturas Map para gerenciar dados de lista
   - Separar estado de carregamento de dados de negócio

4. Segurança de Tipos:
   - Definir interfaces TypeScript claras para cada slice
   - Usar StateCreator do Zustand para garantir consistência de tipos
   - Manter segurança de tipos ao agregar no nível superior

Este método de organização modular de slices torna o gerenciamento de estado de aplicações de grande escala claro, mantenível e fácil de expandir.
