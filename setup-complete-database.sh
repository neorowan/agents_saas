#!/bin/bash

# =============================================================================
# AGENTS CHAT - SETUP COMPLETO DE DATABASE
# =============================================================================

echo "üöÄ Iniciando setup completo do database..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes auxiliares
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se .env existe
if [ ! -f ".env" ]; then
    log_info "Copiando env/.env.vm para .env..."
    cp env/.env.vm .env
else
    log_success ".env j√° existe, mantendo configura√ß√£o atual"
fi

# Carregar vari√°veis do .env
source .env

log_info "Carregando configura√ß√µes do ambiente..."

# 1. Parar todos os containers
log_info "Parando containers existentes..."
docker-compose down

# 2. Limpar dados antigos se necess√°rio
if [ "$1" = "--clean" ]; then
    log_warning "Limpando dados antigos do PostgreSQL..."
    sudo rm -rf data/postgres/*
    sudo rm -rf data/redis/*
    sudo rm -rf data/minio/*
fi

# 3. Criar diret√≥rios necess√°rios
log_info "Criando diret√≥rios de dados..."
mkdir -p data/postgres data/redis data/minio data/casdoor logs/app

# 4. Subir PostgreSQL primeiro
log_info "Iniciando PostgreSQL com pgvector..."
docker-compose up -d postgres

# 5. Aguardar PostgreSQL ficar pronto
log_info "Aguardando PostgreSQL inicializar..."
sleep 15

# Fun√ß√£o para verificar se PostgreSQL est√° pronto
wait_for_postgres() {
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if docker exec agents-chat-postgres pg_isready -U postgres > /dev/null 2>&1; then
            log_success "PostgreSQL est√° pronto!"
            return 0
        fi
        
        log_info "Tentativa $attempt/$max_attempts - PostgreSQL ainda n√£o est√° pronto..."
        sleep 2
        ((attempt++))
    done
    
    log_error "PostgreSQL n√£o ficou pronto ap√≥s $max_attempts tentativas"
    return 1
}

# Aguardar PostgreSQL ficar pronto
if ! wait_for_postgres; then
    log_error "Falha ao inicializar PostgreSQL"
    exit 1
fi

# 6. Criar databases necess√°rios
log_info "Criando databases necess√°rios..."

# Criar database para Lobe Chat
docker exec agents-chat-postgres psql -U postgres -c "CREATE DATABASE IF NOT EXISTS agents_chat;" || {
    docker exec agents-chat-postgres psql -U postgres -c "CREATE DATABASE agents_chat;"
}

# Criar database para Casdoor
docker exec agents-chat-postgres psql -U postgres -c "CREATE DATABASE IF NOT EXISTS casdoor;" || {
    docker exec agents-chat-postgres psql -U postgres -c "CREATE DATABASE casdoor;"
}

# Verificar databases criados
log_info "Verificando databases criados..."
docker exec agents-chat-postgres psql -U postgres -c "\l"

# 7. Instalar extens√£o pgvector no database do Lobe Chat
log_info "Instalando extens√£o pgvector..."
docker exec agents-chat-postgres psql -U postgres -d agents_chat -c "CREATE EXTENSION IF NOT EXISTS vector;"

log_success "Databases criados com sucesso!"

# 8. Subir Redis e MinIO
log_info "Iniciando Redis e MinIO..."
docker-compose up -d redis minio

# 9. Aguardar MinIO
sleep 10

# 10. Configurar bucket do MinIO
log_info "Configurando bucket do MinIO..."
docker exec agents-chat-minio mc alias set local http://localhost:9000 minioadmin $MINIO_ROOT_PASSWORD
docker exec agents-chat-minio mc mb local/lobe --ignore-existing

# 11. Build da aplica√ß√£o
log_info "Fazendo build da aplica√ß√£o..."
export DOCKERFILE_PATH=Dockerfile.database
docker-compose build --no-cache app

# 12. Subir aplica√ß√£o
log_info "Iniciando aplica√ß√£o..."
docker-compose up -d app

# 13. Aguardar aplica√ß√£o e executar migra√ß√µes
log_info "Aguardando aplica√ß√£o inicializar..."
sleep 20

# =============================================================================
# MIGRA√á√ïES DE BANCO - EXPLICA√á√ÉO
# =============================================================================
log_info "Executando migra√ß√µes das aplica√ß√µes..."
echo ""
echo "üìö SOBRE AS MIGRA√á√ïES:"
echo "   ‚Ä¢ Lobe Chat: Usa Drizzle ORM - cria tabelas automaticamente"
echo "   ‚Ä¢ Casdoor: Cria suas pr√≥prias tabelas na inicializa√ß√£o"
echo "   ‚Ä¢ PostgreSQL: Databases criados pelo script init-databases.sql"
echo ""

# Verificar e executar migra√ß√µes do Lobe Chat
log_info "Executando migra√ß√µes do Lobe Chat (Drizzle ORM)..."
docker exec agents-chat /bin/node /app/docker.cjs || {
    log_warning "Primeira tentativa falhou, tentando novamente..."
    sleep 5
    docker exec agents-chat /bin/node /app/docker.cjs || {
        log_error "Migra√ß√£o falhou. Verificar logs da aplica√ß√£o."
    }
}

# Verificar se tabelas foram criadas
log_info "Verificando tabelas criadas no banco agents_chat..."
docker exec agents-chat-postgres psql -U postgres -d agents_chat -c "\dt" | head -10

# 14. Subir Casdoor
log_info "Iniciando Casdoor..."
docker-compose up -d casdoor

# 15. Verificar status de todos os servi√ßos
log_info "Verificando status dos servi√ßos..."
sleep 10

echo ""
echo "üìä Status dos servi√ßos:"
docker-compose ps

echo ""
echo "üîç Logs da aplica√ß√£o (√∫ltimas 20 linhas):"
docker logs --tail 20 agents-chat

echo ""
log_success "Setup completo finalizado!"
echo ""
echo "üåê URLs de acesso:"
echo "   ‚Ä¢ Aplica√ß√£o: http://64.23.166.36:3210"
echo "   ‚Ä¢ Casdoor:   http://64.23.166.36:8000"
echo "   ‚Ä¢ MinIO:     http://64.23.166.36:9000"
echo ""
echo "üìã Para verificar logs:"
echo "   ‚Ä¢ docker logs -f agents-chat        # Aplica√ß√£o"
echo "   ‚Ä¢ docker logs -f agents-chat-postgres # PostgreSQL"
echo "   ‚Ä¢ docker logs -f agents-chat-casdoor  # Casdoor"
echo ""
echo "üîß Para recriar tudo:"
echo "   ‚Ä¢ ./setup-complete-database.sh --clean"